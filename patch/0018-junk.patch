From 683582ed6f4c2abca3a2c7c13b9f4cbdae66a4a6 Mon Sep 17 00:00:00 2001
From: Gur Stavi <gustavi@microsoft.com>
Date: Sat, 1 Feb 2020 22:49:50 +0200
Subject: [PATCH 18/18] junk
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="------------2.30.0"

This is a multi-part message in MIME format.
--------------2.30.0
Content-Type: text/plain; charset=UTF-8; format=fixed
Content-Transfer-Encoding: 8bit


diff --git a/PowerEditor/src/MISC/Common/verifySignedfile.cpp b/PowerEditor/src/MISC/Common/verifySignedfile.cpp
index ae41d6bc..42244fd0 100644
--- a/PowerEditor/src/MISC/Common/verifySignedfile.cpp
+++ b/PowerEditor/src/MISC/Common/verifySignedfile.cpp
@@ -62,6 +62,8 @@ SecurityGard::SecurityGard()
 
 bool SecurityGard::checkModule(const std::wstring& filePath, NppModule module2check)
 {
+    (void)filePath;
+    (void)module2check;
 	return true;
 }
 
diff --git a/PowerEditor/src/Notepad_plus.cpp b/PowerEditor/src/Notepad_plus.cpp
index 88c08880..c8f895b3 100644
--- a/PowerEditor/src/Notepad_plus.cpp
+++ b/PowerEditor/src/Notepad_plus.cpp
@@ -365,11 +365,11 @@ LRESULT Notepad_plus::init(HWND hwnd)
     //--Status Bar Section--//
 	bool willBeShown = nppGUI._statusBarShow;
     _statusBar.init(_pPublicInterface->getHinst(), hwnd, 6);
-	_statusBar.setPartWidth(STATUSBAR_DOC_SIZE, nppParam._dpiManager.scaleX(200));
-	_statusBar.setPartWidth(STATUSBAR_CUR_POS, nppParam._dpiManager.scaleX(260));
-	_statusBar.setPartWidth(STATUSBAR_EOF_FORMAT, nppParam._dpiManager.scaleX(110));
-	_statusBar.setPartWidth(STATUSBAR_UNICODE_TYPE, nppParam._dpiManager.scaleX(120));
-	_statusBar.setPartWidth(STATUSBAR_TYPING_MODE, nppParam._dpiManager.scaleX(30));
+	_statusBar.setPartWidth(STATUSBAR_DOC_SIZE, nppParam._dpiManager.scaleX(300));
+	_statusBar.setPartWidth(STATUSBAR_CUR_POS, nppParam._dpiManager.scaleX(400));
+	_statusBar.setPartWidth(STATUSBAR_EOF_FORMAT, nppParam._dpiManager.scaleX(250));
+	_statusBar.setPartWidth(STATUSBAR_UNICODE_TYPE, nppParam._dpiManager.scaleX(200));
+	_statusBar.setPartWidth(STATUSBAR_TYPING_MODE, nppParam._dpiManager.scaleX(60));
     _statusBar.display(willBeShown);
 
     _pMainWindow = &_mainDocTab;
diff --git a/PowerEditor/src/Notepad_plus_Window.cpp b/PowerEditor/src/Notepad_plus_Window.cpp
index c5b2b6cb..1eb3f8c0 100644
--- a/PowerEditor/src/Notepad_plus_Window.cpp
+++ b/PowerEditor/src/Notepad_plus_Window.cpp
@@ -29,6 +29,7 @@
 #include <time.h>
 #include <shlwapi.h>
 #include "Notepad_plus_Window.h"
+#include "font_helper.h"
 
 const TCHAR Notepad_plus_Window::_className[32] = TEXT("Notepad++");
 HWND Notepad_plus_Window::gNppHWND = NULL;
@@ -114,6 +115,11 @@ void Notepad_plus_Window::init(HINSTANCE hInst, HWND parent, const TCHAR *cmdLin
 	if (NULL == _hSelf)
 		throw std::runtime_error("Notepad_plus_Window::init : CreateWindowEx() function return null");
 
+    {
+        HFONT my_font = create_font(_hSelf, MY_FONT, 12);
+        ::SendMessage(_hSelf, WM_SETFONT, reinterpret_cast<WPARAM>(my_font), 0);
+    }
+
 
 	PaintLocker paintLocker{_hSelf};
 
diff --git a/PowerEditor/src/NppBigSwitch.cpp b/PowerEditor/src/NppBigSwitch.cpp
index 56f15172..42a404dd 100644
--- a/PowerEditor/src/NppBigSwitch.cpp
+++ b/PowerEditor/src/NppBigSwitch.cpp
@@ -2372,7 +2372,7 @@ LRESULT Notepad_plus::process(HWND hwnd, UINT message, WPARAM wParam, LPARAM lPa
 
 		case WM_DPICHANGED:
 		{
-			return TRUE;
+			return 0;
 		}
 
 		default:
diff --git a/PowerEditor/src/NppCommands.cpp b/PowerEditor/src/NppCommands.cpp
index c2ff86ff..05370a42 100644
--- a/PowerEditor/src/NppCommands.cpp
+++ b/PowerEditor/src/NppCommands.cpp
@@ -462,7 +462,7 @@ void Notepad_plus::command(int id)
 			if (nppGui._searchEngineChoice == nppGui.se_custom)
 			{
 				url = nppGui._searchEngineCustom;
-				remove_if(url.begin(), url.end(), _istspace);
+				//remove_if(url.begin(), url.end(), _istspace);
 
 				auto httpPos = url.find(TEXT("http://"));
 				auto httpsPos = url.find(TEXT("https://"));
diff --git a/PowerEditor/src/ScitillaComponent/ScintillaEditView.cpp b/PowerEditor/src/ScitillaComponent/ScintillaEditView.cpp
index f447cb85..737140cb 100644
--- a/PowerEditor/src/ScitillaComponent/ScintillaEditView.cpp
+++ b/PowerEditor/src/ScitillaComponent/ScintillaEditView.cpp
@@ -243,6 +243,7 @@ void ScintillaEditView::init(HINSTANCE hInst, HWND hPere)
 
 	if (!_hSelf)
 	{
+        DWORD Error = GetLastError();
 		throw std::runtime_error("ScintillaEditView::init : CreateWindowEx() function return null");
 	}
 
diff --git a/PowerEditor/src/WinControls/DockingWnd/DockingCont.cpp b/PowerEditor/src/WinControls/DockingWnd/DockingCont.cpp
index fa1e133a..2c49015b 100644
--- a/PowerEditor/src/WinControls/DockingWnd/DockingCont.cpp
+++ b/PowerEditor/src/WinControls/DockingWnd/DockingCont.cpp
@@ -31,6 +31,7 @@
 #include "SplitterContainer.h"
 #include "ToolTip.h"
 #include "Parameters.h"
+#include <font_helper.h>
 
 using namespace std;
 
@@ -122,8 +123,8 @@ void DockingCont::doDialog(bool willBeShown, bool isFloating)
 			::ShowWindow(_hCaption, SW_SHOW);
 		}
 
-		//If you want defualt GUI font
-		_hFont = (HFONT)GetStockObject(DEFAULT_GUI_FONT);
+		_hFont = create_font(getHSelf(), MY_FONT, 10);
+		_captionHeightDynamic = get_font_pixels_height(getHSelf(), _hFont) + 4;
 	}
 
 	display(willBeShown);
diff --git a/PowerEditor/src/WinControls/Grid/BabyGrid.cpp b/PowerEditor/src/WinControls/Grid/BabyGrid.cpp
index 830dbf6e..2caf4c73 100644
--- a/PowerEditor/src/WinControls/Grid/BabyGrid.cpp
+++ b/PowerEditor/src/WinControls/Grid/BabyGrid.cpp
@@ -12,6 +12,7 @@ Modified by Don HO <don.h@free.fr>
 
 #include "BabyGrid.h"
 #include "Parameters.h"
+#include "font_helper.h"
 
 #define MAX_GRIDS 20
 
@@ -1300,6 +1301,7 @@ void SizeGrid(HWND hWnd,int /*SI*/)
 
 int FindLongestLine(HDC hdc,TCHAR* text,SIZE* size)
 {
+#if 0
 	int longest = 0;
      TCHAR temptext[1000];
      TCHAR *p;
@@ -1313,9 +1315,12 @@ int FindLongestLine(HDC hdc,TCHAR* text,SIZE* size)
               {
                longest=size->cx;
               }
-          p = generic_strtok(TEXT('\0'), TEXT("\n"));
+          p = generic_strtok(TEXT("\0"), TEXT("\n"));
          }
      return longest;
+#else
+    return 0;
+#endif
 }
 
 
@@ -3048,17 +3053,9 @@ LRESULT CALLBACK GridProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
 
               if(CountGrids()==1)
                   {
-                   hfontbody=CreateFont(16,0,0, 0,
-										100,
-										FALSE,
-										FALSE,FALSE,DEFAULT_CHARSET,
-										OUT_DEFAULT_PRECIS,
-										CLIP_DEFAULT_PRECIS,
-										0,
-										0 ,
-										TEXT("MS Shell Dlg"));
-                   hfontheader=CreateFont(18,0,0, 0,FW_HEAVY,FALSE,FALSE,FALSE,DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, 0, 0, TEXT("MS Shell Dlg"));
-                   hfonttitle=CreateFont(20,0,0, 0,FW_HEAVY,FALSE,FALSE,FALSE,DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, 0, 0, TEXT("MS Shell Dlg"));
+                   hfontbody = create_font(hWnd, MY_FONT, 10);
+                   hfontheader = create_font(hWnd, HEADER_FONT, 12);
+                   hfonttitle = create_font(hWnd, HEADER_FONT, 12);
                   }
 
 
diff --git a/PowerEditor/src/WinControls/Grid/ShortcutMapper.cpp b/PowerEditor/src/WinControls/Grid/ShortcutMapper.cpp
index 05459cb8..653d55f1 100644
--- a/PowerEditor/src/WinControls/Grid/ShortcutMapper.cpp
+++ b/PowerEditor/src/WinControls/Grid/ShortcutMapper.cpp
@@ -28,6 +28,7 @@
 
 #include "ShortcutMapper.h"
 #include "Notepad_plus.h"
+#include "font_helper.h"
 
 
 using namespace std;
@@ -106,14 +107,8 @@ void ShortcutMapper::initBabyGrid() {
 	_lastCursorRow.resize(5, 1);
 
 	_hGridFonts.resize(MAX_GRID_FONTS);
-	_hGridFonts.at(GFONT_HEADER) = ::CreateFont(
-		NppParameters::getInstance()._dpiManager.scaleY(18), 0, 0, 0, FW_BOLD,
-		FALSE, FALSE, FALSE, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, DEFAULT_PITCH,
-		TEXT("MS Shell Dlg"));
-	_hGridFonts.at(GFONT_ROWS) = ::CreateFont(
-		NppParameters::getInstance()._dpiManager.scaleY(16), 0, 0, 0, FW_NORMAL,
-		FALSE, FALSE, FALSE, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, DEFAULT_PITCH,
-		TEXT("MS Shell Dlg"));
+	_hGridFonts.at(GFONT_HEADER) = create_font(_hSelf, HEADER_FONT, 10);
+	_hGridFonts.at(GFONT_ROWS) = create_font(_hSelf, MY_FONT, 10);
 	
 	_babygrid.init(_hInst, _hSelf, IDD_BABYGRID_ID1);
 
diff --git a/PowerEditor/src/WinControls/ProjectPanel/TreeView.cpp b/PowerEditor/src/WinControls/ProjectPanel/TreeView.cpp
index 753c7220..6993a79e 100644
--- a/PowerEditor/src/WinControls/ProjectPanel/TreeView.cpp
+++ b/PowerEditor/src/WinControls/ProjectPanel/TreeView.cpp
@@ -29,8 +29,7 @@
 
 #include "TreeView.h"
 #include "Parameters.h"
-
-#define CY_ITEMHEIGHT     18
+#include "font_helper.h"
 
 void TreeView::init(HINSTANCE hInst, HWND parent, int treeViewID)
 {
@@ -48,8 +47,11 @@ void TreeView::init(HINSTANCE hInst, HWND parent, int treeViewID)
                             _hInst,
                             (LPVOID)0);
 
-	int itemHeight = NppParameters::getInstance()._dpiManager.scaleY(CY_ITEMHEIGHT);
-	TreeView_SetItemHeight(_hSelf, itemHeight);
+	_hfont = create_font(_hSelf, MY_FONT, 12);
+	SendMessage(_hSelf, WM_SETFONT, reinterpret_cast<WPARAM>(_hfont), 0); 
+
+	int itemHeight = get_font_pixels_height(_hSelf, _hfont);
+	TreeView_SetItemHeight(_hSelf, itemHeight + 2);
 
 	::SetWindowLongPtr(_hSelf, GWLP_USERDATA, reinterpret_cast<LONG_PTR>(this));
 	_defaultProc = reinterpret_cast<WNDPROC>(::SetWindowLongPtr(_hSelf, GWLP_WNDPROC, reinterpret_cast<LONG_PTR>(staticProc)));
@@ -62,6 +64,8 @@ void TreeView::destroy()
 	cleanSubEntries(root);
 	::DestroyWindow(_hSelf);
 	_hSelf = NULL;
+	if (_hfont != NULL)
+		DeleteObject(_hfont);
 }
 
 LRESULT TreeView::runProc(HWND hwnd, UINT Message, WPARAM wParam, LPARAM lParam)
diff --git a/PowerEditor/src/WinControls/ProjectPanel/TreeView.h b/PowerEditor/src/WinControls/ProjectPanel/TreeView.h
index 6adb7b40..59299200 100644
--- a/PowerEditor/src/WinControls/ProjectPanel/TreeView.h
+++ b/PowerEditor/src/WinControls/ProjectPanel/TreeView.h
@@ -139,5 +139,7 @@ protected:
 	bool isDescendant(HTREEITEM targetItem, HTREEITEM draggedItem);
 	bool canDragOut(HTREEITEM targetItem);
 	bool canDropIn(HTREEITEM targetItem);
+private:
+	HFONT _hfont = NULL;
 };
 
diff --git a/PowerEditor/src/WinControls/StaticDialog/StaticDialog.cpp b/PowerEditor/src/WinControls/StaticDialog/StaticDialog.cpp
index a866c525..faf62e5c 100644
--- a/PowerEditor/src/WinControls/StaticDialog/StaticDialog.cpp
+++ b/PowerEditor/src/WinControls/StaticDialog/StaticDialog.cpp
@@ -226,6 +226,16 @@ INT_PTR CALLBACK StaticDialog::dlgProc(HWND hwnd, UINT message, WPARAM wParam, L
 			pStaticDlg->_hSelf = hwnd;
 			::SetWindowLongPtr(hwnd, GWLP_USERDATA, static_cast<LONG_PTR>(lParam));
 			::GetWindowRect(hwnd, &(pStaticDlg->_rc));
+
+			DIALOG_DPI_CHANGE_BEHAVIORS xxx = GetDialogDpiChangeBehavior(hwnd);
+			BOOL res = ::SetDialogDpiChangeBehavior(hwnd,
+				DDC_DEFAULT|DDC_DISABLE_ALL|DDC_DISABLE_RESIZE|DDC_DISABLE_CONTROL_RELAYOUT,
+				DDC_DISABLE_ALL|DDC_DISABLE_RESIZE|DDC_DISABLE_CONTROL_RELAYOUT);
+			xxx = GetDialogDpiChangeBehavior(hwnd);
+			res = SetDialogControlDpiChangeBehavior(hwnd,
+				DCDC_DEFAULT|DCDC_DISABLE_FONT_UPDATE|DCDC_DISABLE_RELAYOUT,
+				DCDC_DISABLE_FONT_UPDATE|DCDC_DISABLE_RELAYOUT);
+
 			pStaticDlg->run_dlgProc(message, wParam, lParam);
 
 			return TRUE;
diff --git a/PowerEditor/src/WinControls/StatusBar/StatusBar.cpp b/PowerEditor/src/WinControls/StatusBar/StatusBar.cpp
index ae5dbda0..921b4d36 100644
--- a/PowerEditor/src/WinControls/StatusBar/StatusBar.cpp
+++ b/PowerEditor/src/WinControls/StatusBar/StatusBar.cpp
@@ -32,6 +32,7 @@
 #include "StatusBar.h"
 #include <algorithm>
 #include <cassert>
+#include "font_helper.h"
 
 //#define IDC_STATUSBAR 789
 
@@ -74,6 +75,8 @@ void StatusBar::init(HINSTANCE hInst, HWND hPere, int nbParts)
 	if (!_hSelf)
 		throw std::runtime_error("StatusBar::init : CreateWindowEx() function return null");
 
+	_hfont = create_font(_hSelf, MY_FONT, 12);
+	SendMessage(_hSelf, WM_SETFONT, reinterpret_cast<WPARAM>(_hfont), 0); 
 
 	_partWidthArray.clear();
 	if (nbParts > 0)
@@ -104,6 +107,8 @@ bool StatusBar::setPartWidth(int whichPart, int width)
 void StatusBar::destroy()
 {
 	::DestroyWindow(_hSelf);
+	if (_hfont != NULL)
+		DeleteObject(_hfont);
 }
 
 
diff --git a/PowerEditor/src/WinControls/StatusBar/StatusBar.h b/PowerEditor/src/WinControls/StatusBar/StatusBar.h
index cadad037..54889ddd 100644
--- a/PowerEditor/src/WinControls/StatusBar/StatusBar.h
+++ b/PowerEditor/src/WinControls/StatusBar/StatusBar.h
@@ -57,6 +57,7 @@ public:
 
 private:
 	virtual void init(HINSTANCE hInst, HWND hPere) override;
+	HFONT _hfont;
 
 private:
     std::vector<int> _partWidthArray;
diff --git a/PowerEditor/src/WinControls/TabBar/TabBar.cpp b/PowerEditor/src/WinControls/TabBar/TabBar.cpp
index 32bd0ec6..9f7d7e11 100644
--- a/PowerEditor/src/WinControls/TabBar/TabBar.cpp
+++ b/PowerEditor/src/WinControls/TabBar/TabBar.cpp
@@ -30,6 +30,7 @@
 #include <stdexcept>
 #include "TabBar.h"
 #include "Parameters.h"
+#include "font_helper.h"
 
 #define	IDC_DRAG_TAB     1404
 #define	IDC_DRAG_INTERDIT_TAB 1405
@@ -137,13 +138,8 @@ void TabBar::setFont(const TCHAR *fontName, int fontSize)
 	if (_hFont)
 		::DeleteObject(_hFont);
 
-	_hFont = ::CreateFont( fontSize, 0,
-						  (_isVertical) ? 900:0,
-						  (_isVertical) ? 900:0,
-		                   FW_NORMAL,
-			               0, 0, 0, 0,
-			               0, 0, 0, 0,
-				           fontName);
+	_hFont = create_font(_hSelf, MY_FONT, 12);
+
 	if (_hFont)
 		::SendMessage(_hSelf, WM_SETFONT, reinterpret_cast<WPARAM>(_hFont), 0);
 }
@@ -343,13 +339,11 @@ void TabBarPlus::init(HINSTANCE hInst, HWND parent, bool isVertical, bool isMult
 
 	LOGFONT LogFont;
 
-	_hFont = (HFONT)::SendMessage(_hSelf, WM_GETFONT, 0, 0);
-
 	if (_hFont == NULL)
-		_hFont = (HFONT)::GetStockObject(DEFAULT_GUI_FONT);
+		_hFont = create_font(_hSelf, MY_FONT, 10);
 
 	if (_hLargeFont == NULL)
-		_hLargeFont = (HFONT)::GetStockObject(SYSTEM_FONT);
+		_hLargeFont = create_font(_hSelf, MY_FONT, 12);
 
 	if (::GetObject(_hFont, sizeof(LOGFONT), &LogFont) != 0)
 	{
@@ -922,23 +916,6 @@ void TabBarPlus::drawItem(DRAWITEMSTRUCT *pDrawItemStruct)
 			rect.bottom -= _drawTopBar ? 0 : paddingDynamicTwoY;
 		}
 	}
-	else
-	{
-		if (_isVertical)
-		{
-			rect.left += paddingDynamicTwoX;
-			rect.right += paddingDynamicTwoX;
-			rect.top -= paddingDynamicTwoY;
-			rect.bottom += paddingDynamicTwoY;
-		}
-		else
-		{
-			rect.left -= paddingDynamicTwoX;
-			rect.right += paddingDynamicTwoX;
-			rect.top += paddingDynamicTwoY;
-			rect.bottom += paddingDynamicTwoY;
-		}
-	}
 	
 	// the active tab's text with TCS_BUTTONS is lower than normal and gets clipped
 	if (::GetWindowLongPtr(_hSelf, GWL_STYLE) & TCS_BUTTONS)
@@ -1113,10 +1090,6 @@ void TabBarPlus::drawItem(DRAWITEMSTRUCT *pDrawItemStruct)
 		Flags |= DT_LEFT;
 		Flags |= DT_VCENTER;
 
-		// ignoring the descent when centering (text elements below the base line) is more pleasing to the eye
-		rect.top += textDescent / 2;
-		rect.bottom += textDescent / 2;
-
 		// 1 space distance to save icon
 		rect.left += spaceUnit;
 	}
diff --git a/PowerEditor/src/WinControls/TaskList/TaskList.cpp b/PowerEditor/src/WinControls/TaskList/TaskList.cpp
index 109b7af9..c0a19ce3 100644
--- a/PowerEditor/src/WinControls/TaskList/TaskList.cpp
+++ b/PowerEditor/src/WinControls/TaskList/TaskList.cpp
@@ -32,35 +32,36 @@
 #include "colors.h"
 #include "ImageListSet.h"
 #include "Parameters.h"
+#include "font_helper.h"
 
 void TaskList::init(HINSTANCE hInst, HWND parent, HIMAGELIST hImaLst, int nbItem, int index2set)
 {
-	INITCOMMONCONTROLSEX icex;
-	LVCOLUMN lvColumn;
-
+	INITCOMMONCONTROLSEX icex;
+	LVCOLUMN lvColumn;
+
 	Window::init(hInst, parent);
 
-	// Ensure that the common control DLL is loaded.
-	icex.dwSize = sizeof(INITCOMMONCONTROLSEX);
-	icex.dwICC  = ICC_LISTVIEW_CLASSES;
-	InitCommonControlsEx(&icex);
-
+	// Ensure that the common control DLL is loaded.
+	icex.dwSize = sizeof(INITCOMMONCONTROLSEX);
+	icex.dwICC  = ICC_LISTVIEW_CLASSES;
+	InitCommonControlsEx(&icex);
+
 	_currentIndex = index2set;
-	_nbItem = nbItem;
+	_nbItem = nbItem;
 
-	// Create the list-view window in report view with label editing enabled.
-	int listViewStyles = LVS_REPORT | LVS_NOCOLUMNHEADER | LVS_NOSORTHEADER
-		| LVS_SINGLESEL | LVS_AUTOARRANGE | LVS_SHAREIMAGELISTS;
+	// Create the list-view window in report view with label editing enabled.
+	int listViewStyles = LVS_REPORT | LVS_NOCOLUMNHEADER | LVS_NOSORTHEADER
+		| LVS_SINGLESEL | LVS_AUTOARRANGE | LVS_SHAREIMAGELISTS;
 
-	_hSelf = ::CreateWindow(WC_LISTVIEW,
-                                TEXT(""),
+	_hSelf = ::CreateWindow(WC_LISTVIEW,
+                                TEXT(""),
                                 WS_CHILD | listViewStyles,
                                 0,
                                 0,
                                 0,
-                                0,
-                                _hParent,
-                                (HMENU) NULL,
+                                0,
+                                _hParent,
+                                (HMENU) NULL,
                                 hInst,
                                 NULL);
 	if (!_hSelf)
@@ -72,312 +73,310 @@ void TaskList::init(HINSTANCE hInst, HWND parent, HIMAGELIST hImaLst, int nbItem
 	_defaultProc = reinterpret_cast<WNDPROC>(::SetWindowLongPtr(_hSelf, GWLP_WNDPROC, reinterpret_cast<LONG_PTR>(staticProc)));
 
 	DWORD exStyle = ListView_GetExtendedListViewStyle(_hSelf);
-	exStyle |= LVS_EX_FULLROWSELECT;
+	exStyle |= LVS_EX_FULLROWSELECT;
 	ListView_SetExtendedListViewStyle(_hSelf, exStyle);
 
-	::memset(&lvColumn, 0, sizeof(lvColumn));
-	lvColumn.mask = LVCF_WIDTH | LVCF_SUBITEM;
-	lvColumn.iSubItem = TL_COLUMN_FILENAME;
-	lvColumn.cx = 100;
-	ListView_InsertColumn(_hSelf, TL_COLUMN_FILENAME, &lvColumn);
+	::memset(&lvColumn, 0, sizeof(lvColumn));
+	lvColumn.mask = LVCF_WIDTH | LVCF_SUBITEM;
+	lvColumn.iSubItem = TL_COLUMN_FILENAME;
+	lvColumn.cx = 100;
+	ListView_InsertColumn(_hSelf, TL_COLUMN_FILENAME, &lvColumn);
 
-	lvColumn.mask = LVCF_WIDTH | LVCF_SUBITEM;
-	lvColumn.iSubItem = TL_COLUMN_PATH;
-	lvColumn.cx = 100;
-	ListView_InsertColumn(_hSelf, TL_COLUMN_PATH, &lvColumn);
+	lvColumn.mask = LVCF_WIDTH | LVCF_SUBITEM;
+	lvColumn.iSubItem = TL_COLUMN_PATH;
+	lvColumn.cx = 100;
+	ListView_InsertColumn(_hSelf, TL_COLUMN_PATH, &lvColumn);
 
 	ListView_SetImageList(_hSelf, hImaLst, LVSIL_SMALL);
 	ListView_SetBkColor(_hSelf, lightYellow);
-	ListView_SetTextBkColor(_hSelf, lightYellow);
+	ListView_SetTextBkColor(_hSelf, lightYellow);
 }
 
 void TaskList::destroy()
 {
 	if (_hFont)
 		DeleteObject(_hFont);
-	if (_hFontSelected)
-		DeleteObject(_hFontSelected);
 	::DestroyWindow(_hSelf);
 	_hSelf = NULL;
 }
 
-static void ResetVertScrollBar(HWND hwnd)
-{
-	SCROLLINFO scrlInfo;
-
-	scrlInfo.cbSize = sizeof(scrlInfo);
-	scrlInfo.fMask = SIF_ALL;
-	::GetScrollInfo(hwnd, SB_VERT, &scrlInfo);
-	scrlInfo.fMask = SIF_POS;
-	scrlInfo.nPos = scrlInfo.nMin;
-	::SetScrollInfo(hwnd, SB_VERT, &scrlInfo, FALSE);
-}
-
-static int TSTR_to_str(const TCHAR *Str, int StrSize, char *Buff,
-  int BuffSize)
-{
-  int n = 0;
-
-  if (StrSize == -1)
-    StrSize = ::_tcslen(Str);
-
-  if (StrSize > 0)
-  {
-#ifdef UNICODE
-    n = ::WideCharToMultiByte(CP_UTF8, 0, Str, StrSize, Buff, BuffSize,
-      NULL, NULL);
-    if (n <= 0 || n >= BuffSize)
-      n = BuffSize - 1;
-#else
-    if (n > BuffSize)
-      n = BuffSize - 1;
-    ::memcpy(Buff, Str, n);
-#endif
-  }
-
-  Buff[n] = '\0';
-  return n;
-}
-
-static int str_to_TSTR(const char *Str, int StrSize, TCHAR *Buff,
-  int BuffSize)
-{
-  int n = 0;
-
-  if (StrSize == -1)
-    StrSize = ::strlen(Str);
-
-  if (StrSize > 0)
-  {
-#ifdef UNICODE
-    n = ::MultiByteToWideChar (CP_UTF8, 0, Str, StrSize, Buff, BuffSize);
-    if (n <= 0 || n >= BuffSize)
-      n = BuffSize - 1;
-#else
-    if (n > BuffSize)
-      n = BuffSize - 1;
-    ::memcpy(Buff, Str, n);
-#endif
-  }
-
-  Buff[n] = _T('\0');
-  return n;
-}
-
-static int is_dir_sep(char ch)
-{
-	return ch == '/' || ch == '\\';
-}
-
-/* Update length to remove anything above the current dir separator. */
-static void path_drop_curr(const char *path, int *length)
-{
-	/* Remove everything until dir separator. */
-	while (*length > 0 && !is_dir_sep(path[*length - 1]))
-	{
-		(*length)--;
-	}
-}
-
-/* Update length to drop path separator immediately below it. */
-static void path_drop_separator(const char *path, int *length)
-{
-	/* Remove everything until dir separator. */
-	while (*length > 0 && is_dir_sep(path[*length - 1]))
-	{
-		(*length)--;
-	}
-}
-
-/* Update length to refer to a single directory below. */
-static void path_drop_dir(const char *path, int *length)
-{
-	path_drop_separator(path, length);
-	path_drop_curr(path, length);
-}
-
-/* Add single item (file path) into list view of task list.
- * Break down file path into name and path.
- * Remove from path common prefix that was calculated before. */
-void TaskList::addItem(int idx, const struct TaskLstFnStatus *file,
-	int prefix_length)
-{
-	LVITEM lvItem;
-	int item_idx;
-	char Path[512];
-	TCHAR filename[512];
-	TCHAR pathname[512];
-	int n, off, width;
-
-	n = TSTR_to_str(file->_fn.c_str(), -1, Path, sizeof(Path));
-	off = n;
-	path_drop_curr(Path, &off);
-
-	str_to_TSTR(Path + off, n - off, filename, sizeof(filename));
-	if (off == 3 && Path[2] == '\\' && Path[1] == ':')
-	{
-		/* Don't remove separator. Path is "X:\" */
-	}
-	else
-	{
-		path_drop_separator(Path, &off);
-	}
-	if (off <= prefix_length)
-	{
-		prefix_length = 0;
-	}
-	str_to_TSTR(Path + prefix_length, off - prefix_length,
-		pathname, sizeof(pathname));
-
-	width = ListView_GetStringWidth(_hSelf, filename);
-	if (width > column_width[TL_COLUMN_FILENAME])
-	{
-		column_width[TL_COLUMN_FILENAME] = width;
-	}
-
-	width = ListView_GetStringWidth(_hSelf, pathname);
-	if (width > column_width[TL_COLUMN_PATH])
-	{
-		column_width[TL_COLUMN_PATH] = width;
-	}
-
-	lvItem.mask = LVIF_IMAGE | LVIF_STATE;
-	lvItem.iItem = idx;
-	lvItem.iSubItem = 0;
-	lvItem.iImage = file->_status;
-	lvItem.stateMask = 0xFF;
-	lvItem.state = (idx != _currentIndex) ? 0 : LVIS_SELECTED|LVIS_FOCUSED;
-	item_idx = ListView_InsertItem(_hSelf, &lvItem);
-
-	lvItem.mask = LVIF_TEXT;
-	lvItem.iSubItem = TL_COLUMN_FILENAME;
-	lvItem.pszText = filename;
-	ListView_SetItem(_hSelf, &lvItem);
-
-	lvItem.mask = LVIF_TEXT;
-	lvItem.iSubItem = TL_COLUMN_PATH;
-	lvItem.pszText = pathname;
-	ListView_SetItem(_hSelf, &lvItem);
-
-}
-
-/* If common prefix is shorter than that, just leave it. */
-#define COMMON_PREFIX_MIN 8
-
-/* Called for all items in task list to identify common prefix that will not be
- * displayed in 'path' column. */
-static void findCommonPrefix(const struct TaskLstFnStatus *file,
-	char *buff, int buff_size, int *length, int *first)
-{
-	char Path[512];
-	int i, n;
-
-	/* Early exit if there is no prefix or short prefix. */
-	if (!*first && *length < COMMON_PREFIX_MIN)
-	{
-		*length = 0;
-		return;
-	}
-
-	n = TSTR_to_str(file->_fn.c_str(), -1, Path, sizeof(Path));
-	path_drop_curr(Path, &n);
-	if (n == 0)
-	{
-		return;
-	}
-
-	if (*first)
-	{
-		*first = 0;
-		if (n > buff_size)
-		{
-			n = buff_size - 1;
-			path_drop_curr(Path, &n);
-		}
-		*length = n;
-		memcpy(buff, Path, n);
-		buff[n] = '\0';
-		return;
-	}
-
-	for (i = 0; i < n; i++)
-	{
-		if (Path[i] != buff[i])
-		{
-			break;
-		}
-	}
-
-	if (i < *length)
-	{
-		path_drop_curr(Path, &i);
-		*length = i;
-		buff[i] = '\0';
-	}
-}
-
-void TaskList::addItems(const struct TaskListInfo *tl_info)
-{
-	const struct TaskLstFnStatus *file;
-	int i, first, prefix_length;
-	char prefix_buff[512];
-
-	first = 1;
-	prefix_length = 1;
-	for (i = 0; i < _nbItem && prefix_length > 0; i++)
-	{
-		file = &tl_info->_tlfsLst[i];
-		findCommonPrefix(file, prefix_buff, sizeof(prefix_buff),
-			&prefix_length, &first);
-	}
-
-	/* Path should include at least 2 dirs to avoid confusion. */
-	path_drop_dir(prefix_buff, &prefix_length);
-	path_drop_dir(prefix_buff, &prefix_length);
-	if (prefix_length < COMMON_PREFIX_MIN)
-	{
-		prefix_length = 0;
-	}
-
-
-	memset(column_width, 0, sizeof(column_width));
-	for (i = 0; i < _nbItem; i++)
-	{
-		file = &tl_info->_tlfsLst[i];
-		addItem(i, file, prefix_length);
-	}
-}
-
+static void ResetVertScrollBar(HWND hwnd)
+{
+	SCROLLINFO scrlInfo;
+
+	scrlInfo.cbSize = sizeof(scrlInfo);
+	scrlInfo.fMask = SIF_ALL;
+	::GetScrollInfo(hwnd, SB_VERT, &scrlInfo);
+	scrlInfo.fMask = SIF_POS;
+	scrlInfo.nPos = scrlInfo.nMin;
+	::SetScrollInfo(hwnd, SB_VERT, &scrlInfo, FALSE);
+}
+
+static int TSTR_to_str(const TCHAR *Str, int StrSize, char *Buff,
+  int BuffSize)
+{
+  int n = 0;
+
+  if (StrSize == -1)
+    StrSize = ::_tcslen(Str);
+
+  if (StrSize > 0)
+  {
+#ifdef UNICODE
+    n = ::WideCharToMultiByte(CP_UTF8, 0, Str, StrSize, Buff, BuffSize,
+      NULL, NULL);
+    if (n <= 0 || n >= BuffSize)
+      n = BuffSize - 1;
+#else
+    if (n > BuffSize)
+      n = BuffSize - 1;
+    ::memcpy(Buff, Str, n);
+#endif
+  }
+
+  Buff[n] = '\0';
+  return n;
+}
+
+static int str_to_TSTR(const char *Str, int StrSize, TCHAR *Buff,
+  int BuffSize)
+{
+  int n = 0;
+
+  if (StrSize == -1)
+    StrSize = ::strlen(Str);
+
+  if (StrSize > 0)
+  {
+#ifdef UNICODE
+    n = ::MultiByteToWideChar (CP_UTF8, 0, Str, StrSize, Buff, BuffSize);
+    if (n <= 0 || n >= BuffSize)
+      n = BuffSize - 1;
+#else
+    if (n > BuffSize)
+      n = BuffSize - 1;
+    ::memcpy(Buff, Str, n);
+#endif
+  }
+
+  Buff[n] = _T('\0');
+  return n;
+}
+
+static int is_dir_sep(char ch)
+{
+	return ch == '/' || ch == '\\';
+}
+
+/* Update length to remove anything above the current dir separator. */
+static void path_drop_curr(const char *path, int *length)
+{
+	/* Remove everything until dir separator. */
+	while (*length > 0 && !is_dir_sep(path[*length - 1]))
+	{
+		(*length)--;
+	}
+}
+
+/* Update length to drop path separator immediately below it. */
+static void path_drop_separator(const char *path, int *length)
+{
+	/* Remove everything until dir separator. */
+	while (*length > 0 && is_dir_sep(path[*length - 1]))
+	{
+		(*length)--;
+	}
+}
+
+/* Update length to refer to a single directory below. */
+static void path_drop_dir(const char *path, int *length)
+{
+	path_drop_separator(path, length);
+	path_drop_curr(path, length);
+}
+
+/* Add single item (file path) into list view of task list.
+ * Break down file path into name and path.
+ * Remove from path common prefix that was calculated before. */
+void TaskList::addItem(int idx, const struct TaskLstFnStatus *file,
+	int prefix_length)
+{
+	LVITEM lvItem;
+	int item_idx;
+	char Path[512];
+	TCHAR filename[512];
+	TCHAR pathname[512];
+	int n, off, width;
+
+	n = TSTR_to_str(file->_fn.c_str(), -1, Path, sizeof(Path));
+	off = n;
+	path_drop_curr(Path, &off);
+
+	str_to_TSTR(Path + off, n - off, filename, sizeof(filename));
+	if (off == 3 && Path[2] == '\\' && Path[1] == ':')
+	{
+		/* Don't remove separator. Path is "X:\" */
+	}
+	else
+	{
+		path_drop_separator(Path, &off);
+	}
+	if (off <= prefix_length)
+	{
+		prefix_length = 0;
+	}
+	str_to_TSTR(Path + prefix_length, off - prefix_length,
+		pathname, sizeof(pathname));
+
+	width = ListView_GetStringWidth(_hSelf, filename);
+	if (width > column_width[TL_COLUMN_FILENAME])
+	{
+		column_width[TL_COLUMN_FILENAME] = width;
+	}
+
+	width = ListView_GetStringWidth(_hSelf, pathname);
+	if (width > column_width[TL_COLUMN_PATH])
+	{
+		column_width[TL_COLUMN_PATH] = width;
+	}
+
+	lvItem.mask = LVIF_IMAGE | LVIF_STATE;
+	lvItem.iItem = idx;
+	lvItem.iSubItem = 0;
+	lvItem.iImage = file->_status;
+	lvItem.stateMask = 0xFF;
+	lvItem.state = (idx != _currentIndex) ? 0 : LVIS_SELECTED|LVIS_FOCUSED;
+	item_idx = ListView_InsertItem(_hSelf, &lvItem);
+
+	lvItem.mask = LVIF_TEXT;
+	lvItem.iSubItem = TL_COLUMN_FILENAME;
+	lvItem.pszText = filename;
+	ListView_SetItem(_hSelf, &lvItem);
+
+	lvItem.mask = LVIF_TEXT;
+	lvItem.iSubItem = TL_COLUMN_PATH;
+	lvItem.pszText = pathname;
+	ListView_SetItem(_hSelf, &lvItem);
+
+}
+
+/* If common prefix is shorter than that, just leave it. */
+#define COMMON_PREFIX_MIN 8
+
+/* Called for all items in task list to identify common prefix that will not be
+ * displayed in 'path' column. */
+static void findCommonPrefix(const struct TaskLstFnStatus *file,
+	char *buff, int buff_size, int *length, int *first)
+{
+	char Path[512];
+	int i, n;
+
+	/* Early exit if there is no prefix or short prefix. */
+	if (!*first && *length < COMMON_PREFIX_MIN)
+	{
+		*length = 0;
+		return;
+	}
+
+	n = TSTR_to_str(file->_fn.c_str(), -1, Path, sizeof(Path));
+	path_drop_curr(Path, &n);
+	if (n == 0)
+	{
+		return;
+	}
+
+	if (*first)
+	{
+		*first = 0;
+		if (n > buff_size)
+		{
+			n = buff_size - 1;
+			path_drop_curr(Path, &n);
+		}
+		*length = n;
+		memcpy(buff, Path, n);
+		buff[n] = '\0';
+		return;
+	}
+
+	for (i = 0; i < n; i++)
+	{
+		if (Path[i] != buff[i])
+		{
+			break;
+		}
+	}
+
+	if (i < *length)
+	{
+		path_drop_curr(Path, &i);
+		*length = i;
+		buff[i] = '\0';
+	}
+}
+
+void TaskList::addItems(const struct TaskListInfo *tl_info)
+{
+	const struct TaskLstFnStatus *file;
+	int i, first, prefix_length;
+	char prefix_buff[512];
+
+	first = 1;
+	prefix_length = 1;
+	for (i = 0; i < _nbItem && prefix_length > 0; i++)
+	{
+		file = &tl_info->_tlfsLst[i];
+		findCommonPrefix(file, prefix_buff, sizeof(prefix_buff),
+			&prefix_length, &first);
+	}
+
+	/* Path should include at least 2 dirs to avoid confusion. */
+	path_drop_dir(prefix_buff, &prefix_length);
+	path_drop_dir(prefix_buff, &prefix_length);
+	if (prefix_length < COMMON_PREFIX_MIN)
+	{
+		prefix_length = 0;
+	}
+
+
+	memset(column_width, 0, sizeof(column_width));
+	for (i = 0; i < _nbItem; i++)
+	{
+		file = &tl_info->_tlfsLst[i];
+		addItem(i, file, prefix_length);
+	}
+}
+
 RECT TaskList::adjustSize()
 {
-	DWORD approxRect;
+	DWORD approxRect;
+
+	ListView_SetColumnWidth(_hSelf, TL_COLUMN_FILENAME,
+		column_width[TL_COLUMN_FILENAME] + 30);
+	ListView_SetColumnWidth(_hSelf, TL_COLUMN_PATH,
+		column_width[TL_COLUMN_PATH] + 30);
 
-	ListView_SetColumnWidth(_hSelf, TL_COLUMN_FILENAME,
-		column_width[TL_COLUMN_FILENAME] + 30);
-	ListView_SetColumnWidth(_hSelf, TL_COLUMN_PATH,
-		column_width[TL_COLUMN_PATH] + 30);
-
-	approxRect = ::SendMessage(_hSelf, LVM_APPROXIMATEVIEWRECT, (WPARAM)-1, (LPARAM)-1);
+	approxRect = ::SendMessage(_hSelf, LVM_APPROXIMATEVIEWRECT, (WPARAM)-1, (LPARAM)-1);
 
 	_rc.left = 0;
 	_rc.top = 0;
-	_rc.right = LOWORD(approxRect);
-	_rc.bottom = HIWORD(approxRect) + 5;
-
-	::ShowScrollBar(_hSelf, SB_HORZ, FALSE);
-	if (_rc.bottom < 512)
-	{
-		::ShowScrollBar(_hSelf, SB_VERT, FALSE);
-		reSizeTo(_rc);
-		return _rc;
-	}
-
-	_rc.bottom = 512;
-	::ShowScrollBar(_hSelf, SB_VERT, TRUE);
-	_rc.right += ::GetSystemMetrics(SM_CXVSCROLL);
-	reSizeTo(_rc);
-	ResetVertScrollBar(_hSelf);
-	ListView_EnsureVisible(_hSelf, _currentIndex, FALSE);
+	_rc.right = LOWORD(approxRect);
+	_rc.bottom = HIWORD(approxRect) + 5;
+
+	::ShowScrollBar(_hSelf, SB_HORZ, FALSE);
+	if (_rc.bottom < 512)
+	{
+		::ShowScrollBar(_hSelf, SB_VERT, FALSE);
+		reSizeTo(_rc);
+		return _rc;
+	}
+
+	_rc.bottom = 512;
+	::ShowScrollBar(_hSelf, SB_VERT, TRUE);
+	_rc.right += ::GetSystemMetrics(SM_CXVSCROLL);
+	reSizeTo(_rc);
+	ResetVertScrollBar(_hSelf);
+	ListView_EnsureVisible(_hSelf, _currentIndex, FALSE);
 	return _rc;
 }
 
@@ -385,20 +384,8 @@ void TaskList::setFont(const TCHAR *fontName, int fontSize)
 {
 	if (_hFont)
 		::DeleteObject(_hFont);
-	if (_hFontSelected)
-		::DeleteObject(_hFontSelected);
-
-	_hFont = ::CreateFont(fontSize, 0, 0, 0,
-		                   FW_NORMAL,
-			               0, 0, 0, 0,
-			               0, 0, 0, 0,
-				           fontName);
 
-	_hFontSelected = ::CreateFont(fontSize, 0, 0, 0,
-		                   FW_BOLD,
-			               0, 0, 0, 0,
-			               0, 0, 0, 0,
-				           fontName);
+	_hFont = create_font(_hSelf, MY_FONT, 12);
 
 	if (_hFont)
 		::SendMessage(_hSelf, WM_SETFONT, reinterpret_cast<WPARAM>(_hFont), 0);
@@ -418,22 +405,22 @@ int TaskList::updateCurrentIndex()
 	return _currentIndex;
 }
 
-void TaskList::moveSelection(int delta)
-{
-	size_t selected;
-
-	selected = (_currentIndex + _nbItem + delta) % _nbItem;
-	::SendMessage(_hSelf, WM_SETREDRAW, FALSE, 0);
-	ListView_SetItemState(_hSelf, _currentIndex, 0, LVIS_SELECTED|LVIS_FOCUSED);
-	ListView_SetItemState(_hSelf, selected, LVIS_SELECTED|LVIS_FOCUSED,
-		LVIS_SELECTED|LVIS_FOCUSED);
-	ListView_EnsureVisible(_hSelf, selected, FALSE);
-	::SendMessage(_hSelf, WM_SETREDRAW, TRUE, 0);
-	::RedrawWindow(_hSelf, NULL, NULL, 0);
-		//RDW_ERASE  | RDW_INVALIDATE | RDW_ALLCHILDREN);
-	_currentIndex = selected;
-}
-
+void TaskList::moveSelection(int delta)
+{
+	size_t selected;
+
+	selected = (_currentIndex + _nbItem + delta) % _nbItem;
+	::SendMessage(_hSelf, WM_SETREDRAW, FALSE, 0);
+	ListView_SetItemState(_hSelf, _currentIndex, 0, LVIS_SELECTED|LVIS_FOCUSED);
+	ListView_SetItemState(_hSelf, selected, LVIS_SELECTED|LVIS_FOCUSED,
+		LVIS_SELECTED|LVIS_FOCUSED);
+	ListView_EnsureVisible(_hSelf, selected, FALSE);
+	::SendMessage(_hSelf, WM_SETREDRAW, TRUE, 0);
+	::RedrawWindow(_hSelf, NULL, NULL, 0);
+		//RDW_ERASE  | RDW_INVALIDATE | RDW_ALLCHILDREN);
+	_currentIndex = selected;
+}
+
 LRESULT TaskList::runProc(HWND hwnd, UINT Message, WPARAM wParam, LPARAM lParam)
 {
 	switch (Message)
@@ -452,11 +439,11 @@ LRESULT TaskList::runProc(HWND hwnd, UINT Message, WPARAM wParam, LPARAM lParam)
 			short zDelta = (short) HIWORD(wParam);
 			if (zDelta > 0)
 			{
-				moveSelection(-1);
+				moveSelection(-1);
 			}
 			else
 			{
-				moveSelection(1);
+				moveSelection(1);
 			}
 			ListView_EnsureVisible(_hSelf, _currentIndex, true);
 			return TRUE;
@@ -466,36 +453,36 @@ LRESULT TaskList::runProc(HWND hwnd, UINT Message, WPARAM wParam, LPARAM lParam)
 		{
 			return TRUE;
 		}
-
+
 
 		case WM_GETDLGCODE :
 		{
 			MSG *msg = (MSG*)lParam;
 
-			if ( msg == NULL)
-			{
-				/* Do nothing */
-			}
-			else if (msg->message != WM_KEYDOWN ||
-				(GetKeyState(VK_CONTROL)& 0x80) == 0)
-			{
-				return TRUE;
-			}
-			// Shift+Tab is cool but I think VK_UP and VK_LEFT are also cool :-)
-			else if (msg->wParam == VK_UP ||
-				(msg->wParam == VK_TAB && (GetKeyState(VK_SHIFT) & 0x80) != 0))
-			{
-				moveSelection(-1);
-			}
-			else if (msg->wParam == VK_DOWN || msg->wParam == VK_TAB)
+			if ( msg == NULL)
+			{
+				/* Do nothing */
+			}
+			else if (msg->message != WM_KEYDOWN ||
+				(GetKeyState(VK_CONTROL)& 0x80) == 0)
+			{
+				return TRUE;
+			}
+			// Shift+Tab is cool but I think VK_UP and VK_LEFT are also cool :-)
+			else if (msg->wParam == VK_UP ||
+				(msg->wParam == VK_TAB && (GetKeyState(VK_SHIFT) & 0x80) != 0))
+			{
+				moveSelection(-1);
+			}
+			else if (msg->wParam == VK_DOWN || msg->wParam == VK_TAB)
+			{
+				moveSelection(1);
+			}
+			else if (msg->wParam == VK_ESCAPE || msg->wParam == VK_OEM_3)
 			{
-				moveSelection(1);
+				::PostMessage(_hParent, WM_CLOSE, 0, 0);
 			}
-			else if (msg->wParam == VK_ESCAPE || msg->wParam == VK_OEM_3)
-			{
-				::PostMessage(_hParent, WM_CLOSE, 0, 0);
-			}
-			return DLGC_WANTALLKEYS;
+			return DLGC_WANTALLKEYS;
 		}
 
 		default :
diff --git a/PowerEditor/src/WinControls/TaskList/TaskList.h b/PowerEditor/src/WinControls/TaskList/TaskList.h
index a8c81938..b84e62f1 100644
--- a/PowerEditor/src/WinControls/TaskList/TaskList.h
+++ b/PowerEditor/src/WinControls/TaskList/TaskList.h
@@ -64,8 +64,6 @@ public:
 		return ListView_GetImageList(_hSelf, LVSIL_SMALL);
 	};
 
-	HFONT GetFontSelected() {return _hFontSelected;}
-
 	void addItem(int idx, const struct TaskLstFnStatus *file,
 		int prefix_length);
 	void addItems(const struct TaskListInfo *tl_info);
@@ -81,7 +79,6 @@ protected:
 	};
 
 	HFONT _hFont = nullptr;
-	HFONT _hFontSelected = nullptr;
 	int _nbItem = 0;
 	int _currentIndex = 0;
 	RECT _rc;
diff --git a/PowerEditor/src/font_helper.cpp b/PowerEditor/src/font_helper.cpp
new file mode 100755
index 00000000..4e534799
--- /dev/null
+++ b/PowerEditor/src/font_helper.cpp
@@ -0,0 +1,181 @@
+#include <font_helper.h>
+#include <tchar.h>
+#include <wchar.h>
+#include <string.h>
+#include <shellscalingapi.h>
+
+static HMODULE shcore_dll = NULL;
+static HMODULE user32_dll = NULL;
+
+typedef HRESULT (__stdcall *proc_SetProcessDpiAwareness)(PROCESS_DPI_AWARENESS value);
+typedef HRESULT (__stdcall *proc_GetDpiForMonitor)(HMONITOR hmonitor,
+	MONITOR_DPI_TYPE dpiType, UINT *dpiX, UINT *dpiY);
+
+typedef UINT (__stdcall *proc_GetDpiForSystem)();
+typedef UINT (__stdcall *proc_GetDpiForWindow)(HWND hwnd);
+typedef BOOL (__stdcall *proc_SetProcessDpiAwarenessContext)(DPI_AWARENESS_CONTEXT value);
+
+
+proc_SetProcessDpiAwareness fn_SetProcessDpiAwareness = NULL;
+proc_GetDpiForMonitor fn_GetDpiForMonitor = NULL;
+proc_GetDpiForSystem fn_GetDpiForSystem = NULL;
+proc_GetDpiForWindow fn_GetDpiForWindow = NULL;
+proc_SetProcessDpiAwarenessContext fn_SetProcessDpiAwarenessContext = NULL;
+
+static void set_process_dpi_awareness(void)
+{
+	BOOL res;
+
+	if (fn_SetProcessDpiAwarenessContext != NULL) {
+		res = fn_SetProcessDpiAwarenessContext(DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2);
+		if (res) {
+			return;
+		}
+		res = fn_SetProcessDpiAwarenessContext(DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE);
+		if (res) {
+			return;
+		}
+	}
+	if (fn_SetProcessDpiAwareness != NULL) {
+		fn_SetProcessDpiAwareness(PROCESS_PER_MONITOR_DPI_AWARE);
+	}
+}
+
+void font_helper_init(void)
+{
+	user32_dll = LoadLibraryW(L"user32.dll");
+	if(user32_dll != NULL) {
+		fn_GetDpiForSystem = (proc_GetDpiForSystem)GetProcAddress(
+			user32_dll, "GetDpiForSystem");
+		fn_GetDpiForWindow = (proc_GetDpiForWindow)GetProcAddress(
+			user32_dll, "GetDpiForWindow");
+		fn_SetProcessDpiAwarenessContext = (proc_SetProcessDpiAwarenessContext)GetProcAddress(
+			user32_dll, "SetProcessDpiAwarenessContext");
+	}
+
+	shcore_dll = LoadLibraryW(L"Shcore.dll");
+	if (shcore_dll != NULL) {
+		fn_SetProcessDpiAwareness = (proc_SetProcessDpiAwareness)GetProcAddress(
+			shcore_dll, "SetProcessDpiAwareness");
+		fn_GetDpiForMonitor = (proc_GetDpiForMonitor)GetProcAddress(
+			shcore_dll, "GetDpiForMonitor");
+	}
+
+	set_process_dpi_awareness();
+}
+
+static uint32_t get_monitor_dpi(HMONITOR mon_hndl)
+{
+	HDC hdc;
+	UINT dpix, dpiy;
+	HRESULT res;
+
+	if (fn_GetDpiForMonitor != NULL) {
+		res = fn_GetDpiForMonitor(mon_hndl, MDT_RAW_DPI, &dpix, &dpiy);
+		if (res == S_OK) {
+			return dpiy;
+		}
+	}
+
+	hdc = GetDC(NULL);
+	dpiy = ::GetDeviceCaps(hdc, LOGPIXELSY);
+	ReleaseDC(NULL, hdc);
+	return dpiy;
+}
+
+static uint32_t get_dpi(HWND hwnd)
+{
+	HMONITOR mon_hndl;
+
+	mon_hndl = MonitorFromWindow(hwnd, MONITOR_DEFAULTTONEAREST);
+	return get_monitor_dpi(mon_hndl);
+}
+
+static int CALLBACK enum_font_callback(const LOGFONT *logfont, const TEXTMETRIC *,
+	DWORD, LPARAM lParam)
+{
+	*(LOGFONT *)lParam = *logfont;
+	return 0;
+}
+
+static HFONT create_font_from_list(HWND hwnd,
+	const TCHAR **font_name_arr, uint32_t font_list_size,
+	uint32_t font_size_points, LONG weight)
+{
+	HDC hdc;
+	HFONT font;
+	LOGFONT enum_logfont, logfont;
+	const TCHAR *FontName;
+	uint32_t res, i, dpi;
+
+	if (hwnd == NULL) {
+		hwnd = GetTopWindow(NULL);
+		if (hwnd == NULL) {
+			return (HFONT)GetStockObject(DEFAULT_GUI_FONT);
+		}
+	}
+
+	memset(&logfont, 0, sizeof(logfont));
+	hdc = GetDC(hwnd);
+	for (i = 0; i <= font_list_size; i++) {
+		memset(&enum_logfont, 0, sizeof(enum_logfont));
+		FontName = (i < font_list_size) ? font_name_arr[i] : TEXT("");
+		enum_logfont.lfCharSet = ANSI_CHARSET;
+		_tcsncpy(enum_logfont.lfFaceName, FontName, ARRAYSIZE(enum_logfont.lfFaceName) - 1);
+		res = EnumFontFamiliesEx(hdc, &enum_logfont, enum_font_callback, (LPARAM)&logfont, 0);
+		if (res == 0) {
+			break;
+		}
+	}
+	dpi = get_dpi(hwnd);
+	ReleaseDC(hwnd, hdc);
+
+	logfont.lfHeight = font_size_points * dpi / 72;
+	logfont.lfWidth = 0;
+	logfont.lfWeight = weight;
+	font = CreateFontIndirect(&logfont);
+
+	return font;
+}
+
+static const TCHAR *my_fonts[] = {
+	TEXT("Segoe UI"),
+	TEXT("Tahoma"),
+	TEXT("Times New Roman"),
+	TEXT("Arial"),
+	TEXT("FreeSans"),
+	TEXT("DejaVu Sans Light"),
+	TEXT("Cousine"),
+};
+
+HFONT create_font(HWND hwnd, enum font_use use, uint32_t font_size_points)
+{
+	switch (use) {
+	default:
+	case MY_FONT:
+		return create_font_from_list(hwnd, my_fonts, ARRAYSIZE(my_fonts),
+			font_size_points, FW_EXTRALIGHT);
+	case HEADER_FONT:
+		return create_font_from_list(hwnd, my_fonts, ARRAYSIZE(my_fonts),
+			font_size_points, FW_SEMIBOLD);
+	}
+}
+
+uint32_t get_font_pixels_height(HWND hwnd, HFONT hfont)
+{
+		HDC hdc;
+		HFONT old_font;
+		int saved_state;
+		TEXTMETRIC tm;
+
+		hdc = GetDC(hwnd);
+		saved_state = SaveDC(hdc);
+		old_font = (HFONT)SelectObject(hdc, hfont);
+		GetTextMetrics(hdc, &tm);
+		SelectObject(hdc, old_font);
+		RestoreDC(hdc, saved_state);
+		ReleaseDC(hwnd, hdc);
+
+		return tm.tmHeight;
+}
+
diff --git a/PowerEditor/src/font_helper.h b/PowerEditor/src/font_helper.h
new file mode 100755
index 00000000..951f0b84
--- /dev/null
+++ b/PowerEditor/src/font_helper.h
@@ -0,0 +1,17 @@
+#ifndef FONT_HELPER_H
+#define FONT_HELPER_H
+
+#include <windows.h>
+#include <stdint.h>
+
+enum font_use {
+	MY_FONT,
+	HEADER_FONT,
+};
+
+void font_helper_init(void);
+HFONT create_font(HWND hwnd, enum font_use use, uint32_t font_size_points);
+uint32_t get_font_pixels_height(HWND hwnd, HFONT hfont);
+
+#endif /* FONT_HELPER_H */
+
diff --git a/PowerEditor/src/winmain.cpp b/PowerEditor/src/winmain.cpp
index d9bdc738..11776dfd 100644
--- a/PowerEditor/src/winmain.cpp
+++ b/PowerEditor/src/winmain.cpp
@@ -30,6 +30,7 @@
 #include "Win32Exception.h"	//Win32 exception
 #include "MiniDumper.h"			//Write dump files
 #include "verifySignedfile.h"
+#include <font_helper.h>
 
 typedef std::vector<generic_string> ParamVector;
 
@@ -369,6 +370,8 @@ int WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE, PWSTR pCmdLine, int)
 	if (::GetLastError() == ERROR_ALREADY_EXISTS)
 		TheFirstOne = false;
 
+	font_helper_init();
+
 	// Convert commandline to notepad-compatible format, if applicable
 	if ( isInList(FLAG_NOTEPAD_COMPATIBILITY, params) )
 	{
@@ -410,7 +413,7 @@ int WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE, PWSTR pCmdLine, int)
 
 	NppParameters& nppParameters = NppParameters::getInstance();
 	NppGUI & nppGui = const_cast<NppGUI &>(nppParameters.getNppGUI());
-	bool doUpdateNpp = nppGui._autoUpdateOpt._doAutoUpdate;
+	bool doUpdateNpp = false;
 	bool doUpdatePluginList = nppGui._autoUpdateOpt._doAutoUpdate;
 
 	if (doFunctionListExport || doPrintAndQuit) // export functionlist feature will serialize fuctionlist on the disk, then exit Notepad++. So it's important to not launch into existing instance, and keep it silent.
diff --git a/PowerEditor/visual.net/notepadPlus.vcxproj b/PowerEditor/visual.net/notepadPlus.vcxproj
index 2cc3f357..2fbe1cbd 100755
--- a/PowerEditor/visual.net/notepadPlus.vcxproj
+++ b/PowerEditor/visual.net/notepadPlus.vcxproj
@@ -23,29 +23,29 @@
     <ProjectGuid>{FCF60E65-1B78-4D1D-AB59-4FC00AC8C248}</ProjectGuid>
     <RootNamespace>Notepad++</RootNamespace>
     <Keyword>Win32Proj</Keyword>
-    <WindowsTargetPlatformVersion>10.0.17763.0</WindowsTargetPlatformVersion>
+    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
   </PropertyGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Unicode Release|Win32'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
-    <PlatformToolset>v141</PlatformToolset>
+    <PlatformToolset>v142</PlatformToolset>
     <CharacterSet>Unicode</CharacterSet>
     <WholeProgramOptimization>true</WholeProgramOptimization>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Unicode Release|x64'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
-    <PlatformToolset>v141</PlatformToolset>
+    <PlatformToolset>v142</PlatformToolset>
     <CharacterSet>Unicode</CharacterSet>
     <WholeProgramOptimization>true</WholeProgramOptimization>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Unicode Debug|Win32'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
-    <PlatformToolset>v141</PlatformToolset>
+    <PlatformToolset>v142</PlatformToolset>
     <CharacterSet>Unicode</CharacterSet>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Unicode Debug|x64'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
-    <PlatformToolset>v141</PlatformToolset>
+    <PlatformToolset>v142</PlatformToolset>
     <CharacterSet>Unicode</CharacterSet>
   </PropertyGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
@@ -105,7 +105,7 @@
       <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
       <MultiProcessorCompilation>true</MultiProcessorCompilation>
       <SmallerTypeCheck>false</SmallerTypeCheck>
-      <DisableSpecificWarnings>4091;4456;4457;4459</DisableSpecificWarnings>
+      <DisableSpecificWarnings>4091;4456;4457;4459;4100</DisableSpecificWarnings>
       <AdditionalOptions>/Zc:strictStrings %(AdditionalOptions)</AdditionalOptions>
       <ConformanceMode>true</ConformanceMode>
     </ClCompile>
@@ -143,7 +143,7 @@
       <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
       <MultiProcessorCompilation>true</MultiProcessorCompilation>
       <SmallerTypeCheck>false</SmallerTypeCheck>
-      <DisableSpecificWarnings>4091;4456;4457;4459</DisableSpecificWarnings>
+      <DisableSpecificWarnings>4091;4456;4457;4459;4100</DisableSpecificWarnings>
       <AdditionalOptions>/Zc:strictStrings %(AdditionalOptions)</AdditionalOptions>
       <ConformanceMode>true</ConformanceMode>
     </ClCompile>
@@ -187,7 +187,7 @@
       <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
       <EnableEnhancedInstructionSet>NoExtensions</EnableEnhancedInstructionSet>
       <MultiProcessorCompilation>true</MultiProcessorCompilation>
-      <DisableSpecificWarnings>4091;4456;4457;4459</DisableSpecificWarnings>
+      <DisableSpecificWarnings>4091;4456;4457;4459;4100</DisableSpecificWarnings>
       <AdditionalOptions>/Zc:strictStrings %(AdditionalOptions)</AdditionalOptions>
       <ConformanceMode>true</ConformanceMode>
     </ClCompile>
@@ -239,7 +239,7 @@ copy ..\src\contextMenu.xml ..\bin\contextMenu.xml
       <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
       <EnableEnhancedInstructionSet>NoExtensions</EnableEnhancedInstructionSet>
       <MultiProcessorCompilation>true</MultiProcessorCompilation>
-      <DisableSpecificWarnings>4091;4456;4457;4459</DisableSpecificWarnings>
+      <DisableSpecificWarnings>4091;4456;4457;4459;4100</DisableSpecificWarnings>
       <AdditionalOptions>/Zc:strictStrings %(AdditionalOptions)</AdditionalOptions>
       <ConformanceMode>true</ConformanceMode>
     </ClCompile>
@@ -272,6 +272,7 @@ copy ..\src\contextMenu.xml ..\bin64\contextMenu.xml
     </PostBuildEvent>
   </ItemDefinitionGroup>
   <ItemGroup>
+    <ClCompile Include="..\src\font_helper.cpp" />
     <ClCompile Include="..\src\MISC\Common\verifySignedfile.cpp" />
     <ClCompile Include="..\src\MISC\md5\md5Dlgs.cpp" />
     <ClCompile Include="..\src\MISC\sha2\sha-256.cpp" />
diff --git a/scintilla/win32/PlatWin.cxx b/scintilla/win32/PlatWin.cxx
index 4cdfddef..65af7098 100644
--- a/scintilla/win32/PlatWin.cxx
+++ b/scintilla/win32/PlatWin.cxx
@@ -58,6 +58,8 @@
 #define LOAD_LIBRARY_SEARCH_SYSTEM32 0x00000800
 #endif
 
+int get_monitor_dpi(HDC hdc);
+
 namespace Scintilla {
 
 UINT CodePageFromCharSet(DWORD characterSet, UINT documentCodePage);
@@ -601,7 +603,7 @@ int SurfaceGDI::LogPixelsY() {
 }
 
 int SurfaceGDI::DeviceHeightFont(int points) {
-	return ::MulDiv(points, LogPixelsY(), 72);
+	return ::MulDiv(points, ::get_monitor_dpi(hdc), 72);
 }
 
 void SurfaceGDI::MoveTo(int x_, int y_) {
diff --git a/scintilla/win32/SciLexer.vcxproj b/scintilla/win32/SciLexer.vcxproj
index 3110614c..4623c889 100644
--- a/scintilla/win32/SciLexer.vcxproj
+++ b/scintilla/win32/SciLexer.vcxproj
@@ -1,135 +1,135 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
-<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
-  <ItemGroup Label="ProjectConfigurations">
-    <ProjectConfiguration Include="Debug|Win32">
-      <Configuration>Debug</Configuration>
-      <Platform>Win32</Platform>
-    </ProjectConfiguration>
-    <ProjectConfiguration Include="Debug|x64">
-      <Configuration>Debug</Configuration>
-      <Platform>x64</Platform>
-    </ProjectConfiguration>
-    <ProjectConfiguration Include="Release|Win32">
-      <Configuration>Release</Configuration>
-      <Platform>Win32</Platform>
-    </ProjectConfiguration>
-    <ProjectConfiguration Include="Release|x64">
-      <Configuration>Release</Configuration>
-      <Platform>x64</Platform>
-    </ProjectConfiguration>
-  </ItemGroup>
-  <PropertyGroup Label="Globals">
-    <ProjectGuid>{FBE04237-9C7B-4973-9C60-505975998B39}</ProjectGuid>
-    <Keyword>Win32Proj</Keyword>
-    <RootNamespace>SciLexer</RootNamespace>
-  </PropertyGroup>
-  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
-  <PropertyGroup>
-    <ConfigurationType>DynamicLibrary</ConfigurationType>
-    <CharacterSet>Unicode</CharacterSet>
-    <PlatformToolset>v141</PlatformToolset>
-  </PropertyGroup>
-  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
-    <UseDebugLibraries>true</UseDebugLibraries>
-  </PropertyGroup>
-  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
-    <UseDebugLibraries>true</UseDebugLibraries>
-  </PropertyGroup>
-  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
-    <UseDebugLibraries>false</UseDebugLibraries>
-    <WholeProgramOptimization>true</WholeProgramOptimization>
-  </PropertyGroup>
-  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
-    <UseDebugLibraries>false</UseDebugLibraries>
-    <WholeProgramOptimization>true</WholeProgramOptimization>
-  </PropertyGroup>
-  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
-  <ImportGroup Label="ExtensionSettings">
-  </ImportGroup>
-  <ImportGroup Label="PropertySheets">
-    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
-  </ImportGroup>
-  <PropertyGroup Label="UserMacros" />
-  <PropertyGroup>
-    <LinkIncremental>false</LinkIncremental>
-  </PropertyGroup>
-  <ItemDefinitionGroup>
-    <ClCompile>
-      <WarningLevel>Level4</WarningLevel>
-      <PreprocessorDefinitions>WIN32;SCI_LEXER;_CRT_SECURE_NO_DEPRECATE;_SCL_SECURE_NO_WARNINGS;_WINDOWS;_USRDLL;%(PreprocessorDefinitions)</PreprocessorDefinitions>
-      <AdditionalIncludeDirectories>..\include;..\src;..\lexlib;</AdditionalIncludeDirectories>
-      <BrowseInformation>true</BrowseInformation>
-      <MultiProcessorCompilation>true</MultiProcessorCompilation>
-      <MinimalRebuild>false</MinimalRebuild>
-      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
-    </ClCompile>
-    <Link>
-      <SubSystem>Windows</SubSystem>
-      <GenerateDebugInformation>true</GenerateDebugInformation>
-      <AdditionalDependencies>imm32.lib;msimg32.lib;%(AdditionalDependencies)</AdditionalDependencies>
-    </Link>
-  </ItemDefinitionGroup>
-  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
-    <ClCompile>
-      <PreprocessorDefinitions>_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
-      <LanguageStandard>stdcpp17</LanguageStandard>
-    </ClCompile>
-    <Link>
-      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
-    </Link>
-  </ItemDefinitionGroup>
-  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
-    <ClCompile>
-      <PreprocessorDefinitions>_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
-      <LanguageStandard>stdcpp17</LanguageStandard>
-    </ClCompile>
-    <Link>
-      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
-    </Link>
-  </ItemDefinitionGroup>
-  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
-    <ClCompile>
-      <FunctionLevelLinking>true</FunctionLevelLinking>
-      <IntrinsicFunctions>true</IntrinsicFunctions>
-      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
-      <LanguageStandard>stdcpp17</LanguageStandard>
-    </ClCompile>
-    <Link>
-      <EnableCOMDATFolding>true</EnableCOMDATFolding>
-      <OptimizeReferences>true</OptimizeReferences>
-    </Link>
-  </ItemDefinitionGroup>
-  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
-    <ClCompile>
-      <FunctionLevelLinking>true</FunctionLevelLinking>
-      <IntrinsicFunctions>true</IntrinsicFunctions>
-      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
-      <LanguageStandard>stdcpp17</LanguageStandard>
-    </ClCompile>
-    <Link>
-      <EnableCOMDATFolding>true</EnableCOMDATFolding>
-      <OptimizeReferences>true</OptimizeReferences>
-    </Link>
-  </ItemDefinitionGroup>
-  <ItemGroup>
-    <ClCompile Include="..\lexers\*.cxx" />
-    <ClCompile Include="..\lexlib\*.cxx" />
-    <ClCompile Include="..\src\*.cxx" />
-    <ClCompile Include="..\win32\HanjaDic.cxx" />
-    <ClCompile Include="..\win32\PlatWin.cxx" />
-    <ClCompile Include="..\win32\ScintillaWin.cxx" />
-    <ClCompile Include="..\win32\ScintillaDLL.cxx" />
-  </ItemGroup>
-  <ItemGroup>
-    <ClInclude Include="..\include\*.h" />
-    <ClInclude Include="..\src\*.h" />
-    <ClInclude Include="..\lexlib\*.h" />
-    <ClInclude Include="..\win32\*.h" />
-  </ItemGroup>
-  <ItemGroup>
-    <ResourceCompile Include="..\win32\ScintRes.rc" />
-  </ItemGroup>
-  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
-  <ImportGroup Label="ExtensionTargets">
-  </ImportGroup>
-</Project>
+﻿<?xml version="1.0" encoding="utf-8"?>
+<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+  <ItemGroup Label="ProjectConfigurations">
+    <ProjectConfiguration Include="Debug|Win32">
+      <Configuration>Debug</Configuration>
+      <Platform>Win32</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Debug|x64">
+      <Configuration>Debug</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|Win32">
+      <Configuration>Release</Configuration>
+      <Platform>Win32</Platform>
+    </ProjectConfiguration>
+    <ProjectConfiguration Include="Release|x64">
+      <Configuration>Release</Configuration>
+      <Platform>x64</Platform>
+    </ProjectConfiguration>
+  </ItemGroup>
+  <PropertyGroup Label="Globals">
+    <ProjectGuid>{FBE04237-9C7B-4973-9C60-505975998B39}</ProjectGuid>
+    <Keyword>Win32Proj</Keyword>
+    <RootNamespace>SciLexer</RootNamespace>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
+  <PropertyGroup>
+    <ConfigurationType>DynamicLibrary</ConfigurationType>
+    <CharacterSet>Unicode</CharacterSet>
+    <PlatformToolset>v142</PlatformToolset>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
+    <UseDebugLibraries>true</UseDebugLibraries>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
+    <UseDebugLibraries>true</UseDebugLibraries>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
+    <UseDebugLibraries>false</UseDebugLibraries>
+    <WholeProgramOptimization>true</WholeProgramOptimization>
+  </PropertyGroup>
+  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
+    <UseDebugLibraries>false</UseDebugLibraries>
+    <WholeProgramOptimization>true</WholeProgramOptimization>
+  </PropertyGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
+  <ImportGroup Label="ExtensionSettings">
+  </ImportGroup>
+  <ImportGroup Label="PropertySheets">
+    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
+  </ImportGroup>
+  <PropertyGroup Label="UserMacros" />
+  <PropertyGroup>
+    <LinkIncremental>false</LinkIncremental>
+  </PropertyGroup>
+  <ItemDefinitionGroup>
+    <ClCompile>
+      <WarningLevel>Level4</WarningLevel>
+      <PreprocessorDefinitions>WIN32;SCI_LEXER;_CRT_SECURE_NO_DEPRECATE;_SCL_SECURE_NO_WARNINGS;_WINDOWS;_USRDLL;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <AdditionalIncludeDirectories>..\include;..\src;..\lexlib;</AdditionalIncludeDirectories>
+      <BrowseInformation>true</BrowseInformation>
+      <MultiProcessorCompilation>true</MultiProcessorCompilation>
+      <MinimalRebuild>false</MinimalRebuild>
+      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
+    </ClCompile>
+    <Link>
+      <SubSystem>Windows</SubSystem>
+      <GenerateDebugInformation>true</GenerateDebugInformation>
+      <AdditionalDependencies>imm32.lib;msimg32.lib;Shcore.lib;%(AdditionalDependencies)</AdditionalDependencies>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
+    <ClCompile>
+      <PreprocessorDefinitions>_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <LanguageStandard>stdcpp17</LanguageStandard>
+    </ClCompile>
+    <Link>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
+    <ClCompile>
+      <PreprocessorDefinitions>_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <LanguageStandard>stdcpp17</LanguageStandard>
+    </ClCompile>
+    <Link>
+      <LinkTimeCodeGeneration>Default</LinkTimeCodeGeneration>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
+    <ClCompile>
+      <FunctionLevelLinking>true</FunctionLevelLinking>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <LanguageStandard>stdcpp17</LanguageStandard>
+    </ClCompile>
+    <Link>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <OptimizeReferences>true</OptimizeReferences>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
+    <ClCompile>
+      <FunctionLevelLinking>true</FunctionLevelLinking>
+      <IntrinsicFunctions>true</IntrinsicFunctions>
+      <PreprocessorDefinitions>NDEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>
+      <LanguageStandard>stdcpp17</LanguageStandard>
+    </ClCompile>
+    <Link>
+      <EnableCOMDATFolding>true</EnableCOMDATFolding>
+      <OptimizeReferences>true</OptimizeReferences>
+    </Link>
+  </ItemDefinitionGroup>
+  <ItemGroup>
+    <ClCompile Include="..\lexers\*.cxx" />
+    <ClCompile Include="..\lexlib\*.cxx" />
+    <ClCompile Include="..\src\*.cxx" />
+    <ClCompile Include="..\win32\HanjaDic.cxx" />
+    <ClCompile Include="..\win32\PlatWin.cxx" />
+    <ClCompile Include="..\win32\ScintillaWin.cxx" />
+    <ClCompile Include="..\win32\ScintillaDLL.cxx" />
+  </ItemGroup>
+  <ItemGroup>
+    <ClInclude Include="..\include\*.h" />
+    <ClInclude Include="..\src\*.h" />
+    <ClInclude Include="..\lexlib\*.h" />
+    <ClInclude Include="..\win32\*.h" />
+  </ItemGroup>
+  <ItemGroup>
+    <ResourceCompile Include="..\win32\ScintRes.rc" />
+  </ItemGroup>
+  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
+  <ImportGroup Label="ExtensionTargets">
+  </ImportGroup>
+</Project>
\ No newline at end of file
diff --git a/scintilla/win32/ScintillaWin.cxx b/scintilla/win32/ScintillaWin.cxx
index 8c0b6e5c..704290f5 100644
--- a/scintilla/win32/ScintillaWin.cxx
+++ b/scintilla/win32/ScintillaWin.cxx
@@ -23,6 +23,8 @@
 #include <memory>
 #include <chrono>
 
+#include <shellscalingapi.h>
+
 #undef _WIN32_WINNT
 #define _WIN32_WINNT 0x0500
 #undef WINVER
@@ -3474,3 +3476,21 @@ int ResourcesRelease(bool fromDllMain) {
 int Scintilla_ReleaseResources() {
 	return Scintilla::ResourcesRelease(false);
 }
+
+int get_monitor_dpi(HDC hdc)
+{
+	HWND hwnd;
+	HMONITOR hmon;
+	UINT dpix, dpiy;
+	HRESULT res;
+
+	hwnd = ::WindowFromDC(hdc);
+	hmon = ::MonitorFromWindow(hwnd, MONITOR_DEFAULTTONEAREST);
+	res = ::GetDpiForMonitor(hmon, MDT_RAW_DPI, &dpix, &dpiy);
+
+	if (res == S_OK) {
+		return dpiy;
+	}
+
+	return ::GetDeviceCaps(hdc, LOGPIXELSY);
+}

--------------2.30.0--


