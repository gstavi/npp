From c1aa8dbe8cc7905ffc976865de346a6bdd4863b6 Mon Sep 17 00:00:00 2001
From: gstavi <gur.stavi@gmail.com>
Date: Wed, 15 Jul 2015 16:39:22 +0300
Subject: [PATCH 07/17] Use file descriptor API instead FILE api
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="------------2.30.0"

This is a multi-part message in MIME format.
--------------2.30.0
Content-Type: text/plain; charset=UTF-8; format=fixed
Content-Transfer-Encoding: 8bit


* Use open/close API instead of fopen/fclose so when updating existing files
  over SAMBA they will not be treated as new and retain their current access mode

diff --git a/PowerEditor/src/ScitillaComponent/Buffer.cpp b/PowerEditor/src/ScitillaComponent/Buffer.cpp
index 249b67f0..acbfda18 100644
--- a/PowerEditor/src/ScitillaComponent/Buffer.cpp
+++ b/PowerEditor/src/ScitillaComponent/Buffer.cpp
@@ -893,8 +893,8 @@ bool FileManager::backupCurrentBuffer()
 				::SetFileAttributes(fullpath, dwFileAttribs);
 			}
 
-			FILE *fp = UnicodeConvertor.fopen(fullpath, TEXT("wb"));
-			if (fp)
+			int fd = UnicodeConvertor.fopen(fullpath, TEXT("wb"));
+			if (fd != -1)
 			{
 				int lengthDoc = _pNotepadPlus->_pEditView->getCurrentDocLen();
 				char* buf = (char*)_pNotepadPlus->_pEditView->execute(SCI_GETCHARACTERPOINTER);	//to get characters directly from Scintilla buffer
@@ -1018,8 +1018,8 @@ bool FileManager::saveBuffer(BufferID id, const TCHAR * filename, bool isCopy, g
 
 	int encoding = buffer->getEncoding();
 
-	FILE *fp = UnicodeConvertor.fopen(fullpath, TEXT("wb"));
-	if (fp)
+	int fd = UnicodeConvertor.fopen(fullpath, TEXT("wb"));
+	if (fd != -1)
 	{
 		_pscratchTilla->execute(SCI_SETDOCPOINTER, 0, buffer->_doc);	//generate new document
 
diff --git a/PowerEditor/src/Utf8_16.cpp b/PowerEditor/src/Utf8_16.cpp
index fcc61ddc..87b2857e 100644
--- a/PowerEditor/src/Utf8_16.cpp
+++ b/PowerEditor/src/Utf8_16.cpp
@@ -18,6 +18,11 @@
 
 #include "Utf8_16.h"
 
+#include <fcntl.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <io.h>
+
 const Utf8_16::utf8 Utf8_16::k_Boms[][3] = {
 	{0x00, 0x00, 0x00},  // Unknown
 	{0xEF, 0xBB, 0xBF},  // UTF8
@@ -274,7 +279,7 @@ UniMode Utf8_16_Read::determineEncoding(const unsigned char *buf, size_t bufLen)
 Utf8_16_Write::Utf8_16_Write()
 {
 	m_eEncoding = uni8Bit;
-	m_pFile = NULL;
+	m_fd = -1;
 	m_pNewBuf = NULL;
 	m_bFirstWrite = true;
 	m_nBufSize = 0;
@@ -285,60 +290,104 @@ Utf8_16_Write::~Utf8_16_Write()
 	fclose();
 }
 
-FILE * Utf8_16_Write::fopen(const TCHAR *_name, const TCHAR *_type)
+int Utf8_16_Write::fopen(const TCHAR *_name, const TCHAR *_type)
 {
-	m_pFile = ::generic_fopen(_name, _type);
-
-	m_bFirstWrite = true;
-
-	return m_pFile;
+    unsigned int i;
+    int flags = 0;
+    int is_write = 0;
+
+    for (i = 0; _type[i] != TEXT('\0'); i++)
+    {
+        switch (_type[i])
+        {
+            case TEXT('r'):
+                if (_type[i+1] == TEXT('+'))
+                {
+                    flags |= _O_RDWR;
+                    i++;
+                }
+                else
+                {
+                    flags |= _O_RDONLY;
+                }
+                break;
+            case TEXT('w'):
+                flags |= _O_TRUNC;
+            case TEXT('a'):
+                is_write = 1;
+                if (_type[i+1] == TEXT('+'))
+                {
+                    flags |= _O_RDWR;
+                    i++;
+                }
+                else
+                {
+                    flags |= _O_WRONLY;
+                }
+                break;
+            case TEXT('b'):
+                flags |= _O_BINARY;
+                break;
+            case TEXT('t'):
+                flags |= _O_TEXT;
+                break;
+        }
+    }
+
+    m_fd = _topen(_name, flags);
+    if (m_fd == -1 && is_write)
+        m_fd = _topen(_name, flags | _O_CREAT, _S_IREAD | _S_IWRITE);
+    m_bFirstWrite = true;
+    return m_fd;
 }
 
 size_t Utf8_16_Write::fwrite(const void* p, size_t _size)
 {
     // no file open
-	if (!m_pFile)
+    if (m_fd == -1)
     {
-		return 0;
-	}
+        return 0;
+    }
 
     size_t  ret = 0;
+    int rc;
     
-	if (m_bFirstWrite)
+    if (m_bFirstWrite)
     {
         switch (m_eEncoding)
         {
             case uniUTF8: {
-                ::fwrite(k_Boms[m_eEncoding], 3, 1, m_pFile);
+                ::_write(m_fd, k_Boms[m_eEncoding], 3);
                 break;
             }    
             case uni16BE:
             case uni16LE:
-                ::fwrite(k_Boms[m_eEncoding], 2, 1, m_pFile);
+                ::_write(m_fd, k_Boms[m_eEncoding], 2);
                 break;
             default:
                 // nothing to do
                 break;
         }
-		m_bFirstWrite = false;
+        m_bFirstWrite = false;
     }
     
     switch (m_eEncoding)
     {
-		case uni7Bit:
+        case uni7Bit:
         case uni8Bit:
         case uniCookie:
         case uniUTF8: {
             // Normal write
-            ret = ::fwrite(p, _size, 1, m_pFile);
+            rc = ::_write(m_fd, p, _size);
+            ret = rc == (int)_size ? 1 : 0;
             break;
         }
         case uni16BE_NoBOM:
         case uni16LE_NoBOM:
         case uni16BE:
         case uni16LE: {
-			static const int bufSize = 64*1024;
-			utf16 buf[bufSize];
+            static const int bufSize = 64*1024;
+            utf16 buf[bufSize];
             
             Utf8_Iter iter8;
             iter8.set(static_cast<const ubyte*>(p), _size, m_eEncoding);
@@ -348,11 +397,14 @@ size_t Utf8_16_Write::fwrite(const void* p, size_t _size)
                 if (iter8.canGet()) {
                     buf[bufIndex++] = iter8.get();
                 }
-				++iter8;
-				if (bufIndex == bufSize || !iter8) {
-					if (!::fwrite(buf, bufIndex*sizeof(utf16), 1, m_pFile)) return 0;
-					bufIndex = 0;
-				}
+                ++iter8;
+                if(bufIndex == bufSize || !iter8)
+                {
+                    rc = ::_write(m_fd, buf, bufIndex*sizeof(utf16));
+                    if (rc != (int)(bufIndex*sizeof(utf16)))
+                        return 0;
+                    bufIndex = 0;
+                }
             }
             ret = 1;
             break;
@@ -437,8 +489,11 @@ void Utf8_16_Write::fclose()
 	if (m_pNewBuf)
 		delete [] m_pNewBuf;
 
-	if (m_pFile)
-		::fclose(m_pFile);
+	if (m_fd != -1)
+	{
+		::_close(m_fd);
+		m_fd = -1;
+	}
 }
 
 
diff --git a/PowerEditor/src/Utf8_16.h b/PowerEditor/src/Utf8_16.h
index eebe0585..f83d30cb 100644
--- a/PowerEditor/src/Utf8_16.h
+++ b/PowerEditor/src/Utf8_16.h
@@ -141,7 +141,7 @@ public:
 
 	void setEncoding(UniMode eType);
 
-	FILE * fopen(const TCHAR *_name, const TCHAR *_type);
+	int    fopen(const TCHAR *_name, const TCHAR *_type);
 	size_t fwrite(const void* p, size_t _size);
 	void   fclose();
 
@@ -151,7 +151,11 @@ public:
 
 protected:
 	UniMode m_eEncoding;
-	FILE* m_pFile;
+
+	/* Gur: Use open/close API instead of fopen/fclose so when updating existing
+	 * files over SAMBA they will not be treated as new and retain their current
+	 * access mode */
+	int m_fd;
 	ubyte* m_pNewBuf;
 	size_t m_nBufSize;
 	bool m_bFirstWrite;

--------------2.30.0--


