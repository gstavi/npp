From 0180c0967c93e224900e86bb9f918c191207fc5b Mon Sep 17 00:00:00 2001
From: gstavi <gur.stavi@gmail.com>
Date: Wed, 15 Jul 2015 16:20:26 +0300
Subject: [PATCH 04/18] Indent change maintains indent type
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="------------2.30.0"

This is a multi-part message in MIME format.
--------------2.30.0
Content-Type: text/plain; charset=UTF-8; format=fixed
Content-Transfer-Encoding: 8bit


* If an already indented line changes its indent level with tab or shift-tab
  the new indentation will retain the original indentation type instead of using
  the global type.

diff --git a/scintilla/src/Document.cxx b/scintilla/src/Document.cxx
index 48f3b568..3556689c 100644
--- a/scintilla/src/Document.cxx
+++ b/scintilla/src/Document.cxx
@@ -1487,12 +1487,53 @@ int SCI_METHOD Document::GetLineIndentation(Sci_Position line) {
 	return indent;
 }
 
+/* Decide if line should be indented with tabs (true) or spaces (false).
+ * Line starts with tab --> use tabs
+ * Line starts with space worth of tab -> use spaces
+ * Else -> Decide based on line above.
+ * After 8 lines use configuration mode. */
+bool Document::LineIndentWithTabs(Sci::Line line) const {
+	int up_line, max_up_line, lineStart, i, docLength;
+	char ch;
+
+	if (tabInChars == 0) {
+		return useTabs;
+	}
+
+	docLength = Length();
+	/* Test up to 8 lines above current for a line with valid indentation. */
+	max_up_line = line < 8 ? line : 8;
+	for (up_line = 0; up_line <= max_up_line; up_line++) {
+		lineStart = LineStart(line - up_line);
+		/* Count successive spaces at beginning of line. */
+		for (i = 0; i < tabInChars; i++) {
+			ch = lineStart + i < docLength ? CharAt(lineStart + i) : '\n';
+			if (ch != ' ') {
+				break;
+			}
+		}
+		if (i == 0 && ch == '\t') {
+			return true;
+		}
+		if (i == tabInChars) {
+			return false;
+		}
+		/* Try upper line */
+	}
+	return useTabs;
+}
+
 Sci::Position Document::SetLineIndentation(Sci::Line line, Sci::Position indent) {
 	const int indentOfLine = GetLineIndentation(line);
 	if (indent < 0)
 		indent = 0;
 	if (indent != indentOfLine) {
-		std::string linebuf = CreateIndentation(indent, tabInChars, !useTabs);
+		/*
+		 * Gur: When changing indentation use tab or space based on the current
+		 * indentation of the line and not the global mode.
+		 */
+		bool effUseTabs = LineIndentWithTabs(line);
+		std::string linebuf = CreateIndentation(indent, tabInChars, !effUseTabs);
 		const Sci::Position thisLineStart = LineStart(line);
 		const Sci::Position indentPos = GetLineIndentPosition(line);
 		UndoGroup ug(this);
diff --git a/scintilla/src/Document.h b/scintilla/src/Document.h
index 529045d7..adda6905 100644
--- a/scintilla/src/Document.h
+++ b/scintilla/src/Document.h
@@ -369,6 +369,7 @@ public:
 	Sci::Position GapPosition() const noexcept { return cb.GapPosition(); }
 
 	int SCI_METHOD GetLineIndentation(Sci_Position line) override;
+	bool LineIndentWithTabs(Sci::Line line) const;
 	Sci::Position SetLineIndentation(Sci::Line line, Sci::Position indent);
 	Sci::Position GetLineIndentPosition(Sci::Line line) const;
 	Sci::Position GetColumn(Sci::Position pos);

--------------2.30.0--


