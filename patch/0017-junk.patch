From 9e92f32df43fd770071c33829d272a31c3d96a13 Mon Sep 17 00:00:00 2001
From: Gur Stavi <gustavi@microsoft.com>
Date: Sat, 1 Feb 2020 22:49:50 +0200
Subject: [PATCH 17/17] junk
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="------------2.30.0"

This is a multi-part message in MIME format.
--------------2.30.0
Content-Type: text/plain; charset=UTF-8; format=fixed
Content-Transfer-Encoding: 8bit


diff --git a/PowerEditor/src/MISC/Common/verifySignedfile.cpp b/PowerEditor/src/MISC/Common/verifySignedfile.cpp
index a0ba7d4f..60ff95df 100644
--- a/PowerEditor/src/MISC/Common/verifySignedfile.cpp
+++ b/PowerEditor/src/MISC/Common/verifySignedfile.cpp
@@ -62,6 +62,8 @@ SecurityGard::SecurityGard()
 
 bool SecurityGard::checkModule(const std::wstring& filePath, NppModule module2check)
 {
+    (void)filePath;
+    (void)module2check;
 	return true;
 }
 
diff --git a/PowerEditor/src/Notepad_plus.cpp b/PowerEditor/src/Notepad_plus.cpp
index 1e2b99a9..867f5a1e 100644
--- a/PowerEditor/src/Notepad_plus.cpp
+++ b/PowerEditor/src/Notepad_plus.cpp
@@ -367,11 +367,11 @@ LRESULT Notepad_plus::init(HWND hwnd)
     //--Status Bar Section--//
 	bool willBeShown = nppGUI._statusBarShow;
     _statusBar.init(_pPublicInterface->getHinst(), hwnd, 6);
-	_statusBar.setPartWidth(STATUSBAR_DOC_SIZE, nppParam._dpiManager.scaleX(200));
-	_statusBar.setPartWidth(STATUSBAR_CUR_POS, nppParam._dpiManager.scaleX(260));
-	_statusBar.setPartWidth(STATUSBAR_EOF_FORMAT, nppParam._dpiManager.scaleX(110));
-	_statusBar.setPartWidth(STATUSBAR_UNICODE_TYPE, nppParam._dpiManager.scaleX(120));
-	_statusBar.setPartWidth(STATUSBAR_TYPING_MODE, nppParam._dpiManager.scaleX(30));
+	_statusBar.setPartWidth(STATUSBAR_DOC_SIZE, nppParam._dpiManager.scaleX(300));
+	_statusBar.setPartWidth(STATUSBAR_CUR_POS, nppParam._dpiManager.scaleX(400));
+	_statusBar.setPartWidth(STATUSBAR_EOF_FORMAT, nppParam._dpiManager.scaleX(250));
+	_statusBar.setPartWidth(STATUSBAR_UNICODE_TYPE, nppParam._dpiManager.scaleX(200));
+	_statusBar.setPartWidth(STATUSBAR_TYPING_MODE, nppParam._dpiManager.scaleX(60));
     _statusBar.display(willBeShown);
 
     _pMainWindow = &_mainDocTab;
diff --git a/PowerEditor/src/Notepad_plus_Window.cpp b/PowerEditor/src/Notepad_plus_Window.cpp
index 51b69300..9414a671 100644
--- a/PowerEditor/src/Notepad_plus_Window.cpp
+++ b/PowerEditor/src/Notepad_plus_Window.cpp
@@ -29,6 +29,7 @@
 #include <time.h>
 #include <shlwapi.h>
 #include "Notepad_plus_Window.h"
+#include "font_helper.h"
 
 const TCHAR Notepad_plus_Window::_className[32] = TEXT("Notepad++");
 HWND Notepad_plus_Window::gNppHWND = NULL;
@@ -114,6 +115,11 @@ void Notepad_plus_Window::init(HINSTANCE hInst, HWND parent, const TCHAR *cmdLin
 	if (NULL == _hSelf)
 		throw std::runtime_error("Notepad_plus_Window::init : CreateWindowEx() function return null");
 
+    {
+        HFONT my_font = create_font(_hSelf, MY_FONT, 12);
+        ::SendMessage(_hSelf, WM_SETFONT, reinterpret_cast<WPARAM>(my_font), 0);
+    }
+
 
 	PaintLocker paintLocker{_hSelf};
 
diff --git a/PowerEditor/src/NppBigSwitch.cpp b/PowerEditor/src/NppBigSwitch.cpp
index 8315ce06..0ac798f5 100644
--- a/PowerEditor/src/NppBigSwitch.cpp
+++ b/PowerEditor/src/NppBigSwitch.cpp
@@ -2456,7 +2456,7 @@ LRESULT Notepad_plus::process(HWND hwnd, UINT message, WPARAM wParam, LPARAM lPa
 
 		case WM_DPICHANGED:
 		{
-			return TRUE;
+			return 0;
 		}
 
 		case NPPM_INTERNAL_UPDATECLICKABLELINKS:
diff --git a/PowerEditor/src/NppCommands.cpp b/PowerEditor/src/NppCommands.cpp
index 1de74eb0..d35c0abf 100644
--- a/PowerEditor/src/NppCommands.cpp
+++ b/PowerEditor/src/NppCommands.cpp
@@ -464,7 +464,7 @@ void Notepad_plus::command(int id)
 			if (nppGui._searchEngineChoice == nppGui.se_custom)
 			{
 				url = nppGui._searchEngineCustom;
-				remove_if(url.begin(), url.end(), _istspace);
+				//remove_if(url.begin(), url.end(), _istspace);
 
 				auto httpPos = url.find(TEXT("http://"));
 				auto httpsPos = url.find(TEXT("https://"));
diff --git a/PowerEditor/src/ScitillaComponent/ScintillaEditView.cpp b/PowerEditor/src/ScitillaComponent/ScintillaEditView.cpp
index 569f7ae6..a92f685e 100644
--- a/PowerEditor/src/ScitillaComponent/ScintillaEditView.cpp
+++ b/PowerEditor/src/ScitillaComponent/ScintillaEditView.cpp
@@ -243,6 +243,7 @@ void ScintillaEditView::init(HINSTANCE hInst, HWND hPere)
 
 	if (!_hSelf)
 	{
+        DWORD Error = GetLastError();
 		throw std::runtime_error("ScintillaEditView::init : CreateWindowEx() function return null");
 	}
 
diff --git a/PowerEditor/src/WinControls/DockingWnd/DockingCont.cpp b/PowerEditor/src/WinControls/DockingWnd/DockingCont.cpp
index d8371960..bb02f714 100644
--- a/PowerEditor/src/WinControls/DockingWnd/DockingCont.cpp
+++ b/PowerEditor/src/WinControls/DockingWnd/DockingCont.cpp
@@ -31,6 +31,7 @@
 #include "SplitterContainer.h"
 #include "ToolTip.h"
 #include "Parameters.h"
+#include <font_helper.h>
 
 using namespace std;
 
@@ -122,8 +123,8 @@ void DockingCont::doDialog(bool willBeShown, bool isFloating)
 			::ShowWindow(_hCaption, SW_SHOW);
 		}
 
-		//If you want defualt GUI font
-		_hFont = (HFONT)GetStockObject(DEFAULT_GUI_FONT);
+		_hFont = create_font(getHSelf(), MY_FONT, 10);
+		_captionHeightDynamic = get_font_pixels_height(getHSelf(), _hFont) + 4;
 	}
 
 	display(willBeShown);
diff --git a/PowerEditor/src/WinControls/Grid/BabyGrid.cpp b/PowerEditor/src/WinControls/Grid/BabyGrid.cpp
index 3222da87..7c0ac778 100644
--- a/PowerEditor/src/WinControls/Grid/BabyGrid.cpp
+++ b/PowerEditor/src/WinControls/Grid/BabyGrid.cpp
@@ -12,6 +12,7 @@ Modified by Don HO <don.h@free.fr>
 
 #include "BabyGrid.h"
 #include "Parameters.h"
+#include "font_helper.h"
 
 #define MAX_GRIDS 20
 
@@ -3046,17 +3047,9 @@ LRESULT CALLBACK GridProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
 
               if(CountGrids()==1)
                   {
-                   hfontbody=CreateFont(16,0,0, 0,
-										100,
-										FALSE,
-										FALSE,FALSE,DEFAULT_CHARSET,
-										OUT_DEFAULT_PRECIS,
-										CLIP_DEFAULT_PRECIS,
-										0,
-										0 ,
-										TEXT("MS Shell Dlg"));
-                   hfontheader=CreateFont(18,0,0, 0,FW_HEAVY,FALSE,FALSE,FALSE,DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, 0, 0, TEXT("MS Shell Dlg"));
-                   hfonttitle=CreateFont(20,0,0, 0,FW_HEAVY,FALSE,FALSE,FALSE,DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, 0, 0, TEXT("MS Shell Dlg"));
+                   hfontbody = create_font(hWnd, MY_FONT, 10);
+                   hfontheader = create_font(hWnd, HEADER_FONT, 12);
+                   hfonttitle = create_font(hWnd, HEADER_FONT, 12);
                   }
 
 
diff --git a/PowerEditor/src/WinControls/Grid/ShortcutMapper.cpp b/PowerEditor/src/WinControls/Grid/ShortcutMapper.cpp
index 0e09217c..27ffc0e0 100644
--- a/PowerEditor/src/WinControls/Grid/ShortcutMapper.cpp
+++ b/PowerEditor/src/WinControls/Grid/ShortcutMapper.cpp
@@ -28,6 +28,7 @@
 
 #include "ShortcutMapper.h"
 #include "Notepad_plus.h"
+#include "font_helper.h"
 
 
 using namespace std;
@@ -107,14 +108,8 @@ void ShortcutMapper::initBabyGrid()
 	_lastCursorRow.resize(5, 1);
 
 	_hGridFonts.resize(MAX_GRID_FONTS);
-	_hGridFonts.at(GFONT_HEADER) = ::CreateFont(
-		NppParameters::getInstance()._dpiManager.scaleY(18), 0, 0, 0, FW_BOLD,
-		FALSE, FALSE, FALSE, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, DEFAULT_PITCH,
-		TEXT("MS Shell Dlg"));
-	_hGridFonts.at(GFONT_ROWS) = ::CreateFont(
-		NppParameters::getInstance()._dpiManager.scaleY(16), 0, 0, 0, FW_NORMAL,
-		FALSE, FALSE, FALSE, DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, DEFAULT_PITCH,
-		TEXT("MS Shell Dlg"));
+	_hGridFonts.at(GFONT_HEADER) = create_font(_hSelf, HEADER_FONT, 10);
+	_hGridFonts.at(GFONT_ROWS) = create_font(_hSelf, MY_FONT, 10);
 	
 	_babygrid.init(_hInst, _hSelf, IDD_BABYGRID_ID1);
 
diff --git a/PowerEditor/src/WinControls/ProjectPanel/TreeView.cpp b/PowerEditor/src/WinControls/ProjectPanel/TreeView.cpp
index bae6f57a..989a7d02 100644
--- a/PowerEditor/src/WinControls/ProjectPanel/TreeView.cpp
+++ b/PowerEditor/src/WinControls/ProjectPanel/TreeView.cpp
@@ -29,8 +29,7 @@
 
 #include "TreeView.h"
 #include "Parameters.h"
-
-#define CY_ITEMHEIGHT     18
+#include "font_helper.h"
 
 void TreeView::init(HINSTANCE hInst, HWND parent, int treeViewID)
 {
@@ -48,8 +47,11 @@ void TreeView::init(HINSTANCE hInst, HWND parent, int treeViewID)
                             _hInst,
                             (LPVOID)0);
 
-	int itemHeight = NppParameters::getInstance()._dpiManager.scaleY(CY_ITEMHEIGHT);
-	TreeView_SetItemHeight(_hSelf, itemHeight);
+	_hfont = create_font(_hSelf, MY_FONT, 12);
+	SendMessage(_hSelf, WM_SETFONT, reinterpret_cast<WPARAM>(_hfont), 0); 
+
+	int itemHeight = get_font_pixels_height(_hSelf, _hfont);
+	TreeView_SetItemHeight(_hSelf, itemHeight + 2);
 
 	::SetWindowLongPtr(_hSelf, GWLP_USERDATA, reinterpret_cast<LONG_PTR>(this));
 	_defaultProc = reinterpret_cast<WNDPROC>(::SetWindowLongPtr(_hSelf, GWLP_WNDPROC, reinterpret_cast<LONG_PTR>(staticProc)));
@@ -62,6 +64,8 @@ void TreeView::destroy()
 	cleanSubEntries(root);
 	::DestroyWindow(_hSelf);
 	_hSelf = NULL;
+	if (_hfont != NULL)
+		DeleteObject(_hfont);
 }
 
 LRESULT TreeView::runProc(HWND hwnd, UINT Message, WPARAM wParam, LPARAM lParam)
diff --git a/PowerEditor/src/WinControls/ProjectPanel/TreeView.h b/PowerEditor/src/WinControls/ProjectPanel/TreeView.h
index 1dbd916e..4bccf3e5 100644
--- a/PowerEditor/src/WinControls/ProjectPanel/TreeView.h
+++ b/PowerEditor/src/WinControls/ProjectPanel/TreeView.h
@@ -151,5 +151,7 @@ protected:
 	bool isDescendant(HTREEITEM targetItem, HTREEITEM draggedItem);
 	bool canDragOut(HTREEITEM targetItem);
 	bool canDropIn(HTREEITEM targetItem);
+private:
+	HFONT _hfont = NULL;
 };
 
diff --git a/PowerEditor/src/WinControls/StaticDialog/StaticDialog.cpp b/PowerEditor/src/WinControls/StaticDialog/StaticDialog.cpp
index 41ef8839..d27e95ec 100644
--- a/PowerEditor/src/WinControls/StaticDialog/StaticDialog.cpp
+++ b/PowerEditor/src/WinControls/StaticDialog/StaticDialog.cpp
@@ -300,6 +300,16 @@ INT_PTR CALLBACK StaticDialog::dlgProc(HWND hwnd, UINT message, WPARAM wParam, L
 			pStaticDlg->_hSelf = hwnd;
 			::SetWindowLongPtr(hwnd, GWLP_USERDATA, static_cast<LONG_PTR>(lParam));
 			::GetWindowRect(hwnd, &(pStaticDlg->_rc));
+
+			DIALOG_DPI_CHANGE_BEHAVIORS xxx = GetDialogDpiChangeBehavior(hwnd);
+			BOOL res = ::SetDialogDpiChangeBehavior(hwnd,
+				DDC_DEFAULT|DDC_DISABLE_ALL|DDC_DISABLE_RESIZE|DDC_DISABLE_CONTROL_RELAYOUT,
+				DDC_DISABLE_ALL|DDC_DISABLE_RESIZE|DDC_DISABLE_CONTROL_RELAYOUT);
+			xxx = GetDialogDpiChangeBehavior(hwnd);
+			res = SetDialogControlDpiChangeBehavior(hwnd,
+				DCDC_DEFAULT|DCDC_DISABLE_FONT_UPDATE|DCDC_DISABLE_RELAYOUT,
+				DCDC_DISABLE_FONT_UPDATE|DCDC_DISABLE_RELAYOUT);
+
 			pStaticDlg->run_dlgProc(message, wParam, lParam);
 
 			return TRUE;
diff --git a/PowerEditor/src/WinControls/StatusBar/StatusBar.cpp b/PowerEditor/src/WinControls/StatusBar/StatusBar.cpp
index f1ed9f3d..51569c47 100644
--- a/PowerEditor/src/WinControls/StatusBar/StatusBar.cpp
+++ b/PowerEditor/src/WinControls/StatusBar/StatusBar.cpp
@@ -32,6 +32,7 @@
 #include "StatusBar.h"
 #include <algorithm>
 #include <cassert>
+#include "font_helper.h"
 
 //#define IDC_STATUSBAR 789
 
@@ -74,6 +75,8 @@ void StatusBar::init(HINSTANCE hInst, HWND hPere, int nbParts)
 	if (!_hSelf)
 		throw std::runtime_error("StatusBar::init : CreateWindowEx() function return null");
 
+	_hfont = create_font(_hSelf, MY_FONT, 12);
+	SendMessage(_hSelf, WM_SETFONT, reinterpret_cast<WPARAM>(_hfont), 0); 
 
 	_partWidthArray.clear();
 	if (nbParts > 0)
@@ -104,6 +107,8 @@ bool StatusBar::setPartWidth(int whichPart, int width)
 void StatusBar::destroy()
 {
 	::DestroyWindow(_hSelf);
+	if (_hfont != NULL)
+		DeleteObject(_hfont);
 }
 
 
diff --git a/PowerEditor/src/WinControls/StatusBar/StatusBar.h b/PowerEditor/src/WinControls/StatusBar/StatusBar.h
index 8787492f..2ab15b72 100644
--- a/PowerEditor/src/WinControls/StatusBar/StatusBar.h
+++ b/PowerEditor/src/WinControls/StatusBar/StatusBar.h
@@ -57,6 +57,7 @@ public:
 
 private:
 	virtual void init(HINSTANCE hInst, HWND hPere) override;
+	HFONT _hfont;
 
 private:
     std::vector<int> _partWidthArray;
diff --git a/PowerEditor/src/WinControls/TabBar/TabBar.cpp b/PowerEditor/src/WinControls/TabBar/TabBar.cpp
index 45f2cd64..4f1c462b 100644
--- a/PowerEditor/src/WinControls/TabBar/TabBar.cpp
+++ b/PowerEditor/src/WinControls/TabBar/TabBar.cpp
@@ -30,6 +30,7 @@
 #include <stdexcept>
 #include "TabBar.h"
 #include "Parameters.h"
+#include "font_helper.h"
 
 #define	IDC_DRAG_TAB     1404
 #define	IDC_DRAG_INTERDIT_TAB 1405
@@ -137,13 +138,8 @@ void TabBar::setFont(const TCHAR *fontName, int fontSize)
 	if (_hFont)
 		::DeleteObject(_hFont);
 
-	_hFont = ::CreateFont( fontSize, 0,
-						  (_isVertical) ? 900:0,
-						  (_isVertical) ? 900:0,
-		                   FW_NORMAL,
-			               0, 0, 0, 0,
-			               0, 0, 0, 0,
-				           fontName);
+	_hFont = create_font(_hSelf, MY_FONT, 12);
+
 	if (_hFont)
 		::SendMessage(_hSelf, WM_SETFONT, reinterpret_cast<WPARAM>(_hFont), 0);
 }
@@ -343,13 +339,11 @@ void TabBarPlus::init(HINSTANCE hInst, HWND parent, bool isVertical, bool isMult
 
 	LOGFONT LogFont;
 
-	_hFont = (HFONT)::SendMessage(_hSelf, WM_GETFONT, 0, 0);
-
 	if (_hFont == NULL)
-		_hFont = (HFONT)::GetStockObject(DEFAULT_GUI_FONT);
+		_hFont = create_font(_hSelf, MY_FONT, 10);
 
 	if (_hLargeFont == NULL)
-		_hLargeFont = (HFONT)::GetStockObject(SYSTEM_FONT);
+		_hLargeFont = create_font(_hSelf, MY_FONT, 12);
 
 	if (::GetObject(_hFont, sizeof(LOGFONT), &LogFont) != 0)
 	{
@@ -922,23 +916,6 @@ void TabBarPlus::drawItem(DRAWITEMSTRUCT *pDrawItemStruct)
 			rect.bottom -= _drawTopBar ? 0 : paddingDynamicTwoY;
 		}
 	}
-	else
-	{
-		if (_isVertical)
-		{
-			rect.left += paddingDynamicTwoX;
-			rect.right += paddingDynamicTwoX;
-			rect.top -= paddingDynamicTwoY;
-			rect.bottom += paddingDynamicTwoY;
-		}
-		else
-		{
-			rect.left -= paddingDynamicTwoX;
-			rect.right += paddingDynamicTwoX;
-			rect.top += paddingDynamicTwoY;
-			rect.bottom += paddingDynamicTwoY;
-		}
-	}
 	
 	// the active tab's text with TCS_BUTTONS is lower than normal and gets clipped
 	if (::GetWindowLongPtr(_hSelf, GWL_STYLE) & TCS_BUTTONS)
@@ -1113,10 +1090,6 @@ void TabBarPlus::drawItem(DRAWITEMSTRUCT *pDrawItemStruct)
 		Flags |= DT_LEFT;
 		Flags |= DT_VCENTER;
 
-		// ignoring the descent when centering (text elements below the base line) is more pleasing to the eye
-		rect.top += textDescent / 2;
-		rect.bottom += textDescent / 2;
-
 		// 1 space distance to save icon
 		rect.left += spaceUnit;
 	}
diff --git a/PowerEditor/src/WinControls/TaskList/TaskList.cpp b/PowerEditor/src/WinControls/TaskList/TaskList.cpp
index 0cef6bc8..cb8aa326 100644
--- a/PowerEditor/src/WinControls/TaskList/TaskList.cpp
+++ b/PowerEditor/src/WinControls/TaskList/TaskList.cpp
@@ -32,6 +32,7 @@
 #include "colors.h"
 #include "ImageListSet.h"
 #include "Parameters.h"
+#include "font_helper.h"
 
 void TaskList::init(HINSTANCE hInst, HWND parent, HIMAGELIST hImaLst, int nbItem, int index2set)
 {
@@ -95,8 +96,6 @@ void TaskList::destroy()
 {
 	if (_hFont)
 		DeleteObject(_hFont);
-	if (_hFontSelected)
-		DeleteObject(_hFontSelected);
 	::DestroyWindow(_hSelf);
 	_hSelf = NULL;
 }
@@ -385,20 +384,8 @@ void TaskList::setFont(const TCHAR *fontName, int fontSize)
 {
 	if (_hFont)
 		::DeleteObject(_hFont);
-	if (_hFontSelected)
-		::DeleteObject(_hFontSelected);
 
-	_hFont = ::CreateFont(fontSize, 0, 0, 0,
-		                   FW_NORMAL,
-			               0, 0, 0, 0,
-			               0, 0, 0, 0,
-				           fontName);
-
-	_hFontSelected = ::CreateFont(fontSize, 0, 0, 0,
-		                   FW_BOLD,
-			               0, 0, 0, 0,
-			               0, 0, 0, 0,
-				           fontName);
+	_hFont = create_font(_hSelf, MY_FONT, 12);
 
 	if (_hFont)
 		::SendMessage(_hSelf, WM_SETFONT, reinterpret_cast<WPARAM>(_hFont), 0);
@@ -488,13 +475,13 @@ LRESULT TaskList::runProc(HWND hwnd, UINT Message, WPARAM wParam, LPARAM lParam)
 				moveSelection(-1);
 			}
 			else if (msg->wParam == VK_DOWN || msg->wParam == VK_TAB)
-			{
+			{
 				moveSelection(1);
-			}
+			}
 			else if (msg->wParam == VK_ESCAPE || msg->wParam == VK_OEM_3)
-			{
+			{
 				::PostMessage(_hParent, WM_CLOSE, 0, 0);
-			}
+			}
 			return DLGC_WANTALLKEYS;
 		}
 
diff --git a/PowerEditor/src/WinControls/TaskList/TaskList.h b/PowerEditor/src/WinControls/TaskList/TaskList.h
index 333258d4..fd16f6f9 100644
--- a/PowerEditor/src/WinControls/TaskList/TaskList.h
+++ b/PowerEditor/src/WinControls/TaskList/TaskList.h
@@ -64,8 +64,6 @@ public:
 		return ListView_GetImageList(_hSelf, LVSIL_SMALL);
 	};
 
-	HFONT GetFontSelected() {return _hFontSelected;}
-
 	void addItem(int idx, const struct TaskLstFnStatus *file,
 		int prefix_length);
 	void addItems(const struct TaskListInfo *tl_info);
@@ -81,7 +79,6 @@ protected:
 	};
 
 	HFONT _hFont = nullptr;
-	HFONT _hFontSelected = nullptr;
 	int _nbItem = 0;
 	int _currentIndex = 0;
 	RECT _rc;
diff --git a/PowerEditor/src/font_helper.cpp b/PowerEditor/src/font_helper.cpp
new file mode 100755
index 00000000..4e534799
--- /dev/null
+++ b/PowerEditor/src/font_helper.cpp
@@ -0,0 +1,181 @@
+#include <font_helper.h>
+#include <tchar.h>
+#include <wchar.h>
+#include <string.h>
+#include <shellscalingapi.h>
+
+static HMODULE shcore_dll = NULL;
+static HMODULE user32_dll = NULL;
+
+typedef HRESULT (__stdcall *proc_SetProcessDpiAwareness)(PROCESS_DPI_AWARENESS value);
+typedef HRESULT (__stdcall *proc_GetDpiForMonitor)(HMONITOR hmonitor,
+	MONITOR_DPI_TYPE dpiType, UINT *dpiX, UINT *dpiY);
+
+typedef UINT (__stdcall *proc_GetDpiForSystem)();
+typedef UINT (__stdcall *proc_GetDpiForWindow)(HWND hwnd);
+typedef BOOL (__stdcall *proc_SetProcessDpiAwarenessContext)(DPI_AWARENESS_CONTEXT value);
+
+
+proc_SetProcessDpiAwareness fn_SetProcessDpiAwareness = NULL;
+proc_GetDpiForMonitor fn_GetDpiForMonitor = NULL;
+proc_GetDpiForSystem fn_GetDpiForSystem = NULL;
+proc_GetDpiForWindow fn_GetDpiForWindow = NULL;
+proc_SetProcessDpiAwarenessContext fn_SetProcessDpiAwarenessContext = NULL;
+
+static void set_process_dpi_awareness(void)
+{
+	BOOL res;
+
+	if (fn_SetProcessDpiAwarenessContext != NULL) {
+		res = fn_SetProcessDpiAwarenessContext(DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2);
+		if (res) {
+			return;
+		}
+		res = fn_SetProcessDpiAwarenessContext(DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE);
+		if (res) {
+			return;
+		}
+	}
+	if (fn_SetProcessDpiAwareness != NULL) {
+		fn_SetProcessDpiAwareness(PROCESS_PER_MONITOR_DPI_AWARE);
+	}
+}
+
+void font_helper_init(void)
+{
+	user32_dll = LoadLibraryW(L"user32.dll");
+	if(user32_dll != NULL) {
+		fn_GetDpiForSystem = (proc_GetDpiForSystem)GetProcAddress(
+			user32_dll, "GetDpiForSystem");
+		fn_GetDpiForWindow = (proc_GetDpiForWindow)GetProcAddress(
+			user32_dll, "GetDpiForWindow");
+		fn_SetProcessDpiAwarenessContext = (proc_SetProcessDpiAwarenessContext)GetProcAddress(
+			user32_dll, "SetProcessDpiAwarenessContext");
+	}
+
+	shcore_dll = LoadLibraryW(L"Shcore.dll");
+	if (shcore_dll != NULL) {
+		fn_SetProcessDpiAwareness = (proc_SetProcessDpiAwareness)GetProcAddress(
+			shcore_dll, "SetProcessDpiAwareness");
+		fn_GetDpiForMonitor = (proc_GetDpiForMonitor)GetProcAddress(
+			shcore_dll, "GetDpiForMonitor");
+	}
+
+	set_process_dpi_awareness();
+}
+
+static uint32_t get_monitor_dpi(HMONITOR mon_hndl)
+{
+	HDC hdc;
+	UINT dpix, dpiy;
+	HRESULT res;
+
+	if (fn_GetDpiForMonitor != NULL) {
+		res = fn_GetDpiForMonitor(mon_hndl, MDT_RAW_DPI, &dpix, &dpiy);
+		if (res == S_OK) {
+			return dpiy;
+		}
+	}
+
+	hdc = GetDC(NULL);
+	dpiy = ::GetDeviceCaps(hdc, LOGPIXELSY);
+	ReleaseDC(NULL, hdc);
+	return dpiy;
+}
+
+static uint32_t get_dpi(HWND hwnd)
+{
+	HMONITOR mon_hndl;
+
+	mon_hndl = MonitorFromWindow(hwnd, MONITOR_DEFAULTTONEAREST);
+	return get_monitor_dpi(mon_hndl);
+}
+
+static int CALLBACK enum_font_callback(const LOGFONT *logfont, const TEXTMETRIC *,
+	DWORD, LPARAM lParam)
+{
+	*(LOGFONT *)lParam = *logfont;
+	return 0;
+}
+
+static HFONT create_font_from_list(HWND hwnd,
+	const TCHAR **font_name_arr, uint32_t font_list_size,
+	uint32_t font_size_points, LONG weight)
+{
+	HDC hdc;
+	HFONT font;
+	LOGFONT enum_logfont, logfont;
+	const TCHAR *FontName;
+	uint32_t res, i, dpi;
+
+	if (hwnd == NULL) {
+		hwnd = GetTopWindow(NULL);
+		if (hwnd == NULL) {
+			return (HFONT)GetStockObject(DEFAULT_GUI_FONT);
+		}
+	}
+
+	memset(&logfont, 0, sizeof(logfont));
+	hdc = GetDC(hwnd);
+	for (i = 0; i <= font_list_size; i++) {
+		memset(&enum_logfont, 0, sizeof(enum_logfont));
+		FontName = (i < font_list_size) ? font_name_arr[i] : TEXT("");
+		enum_logfont.lfCharSet = ANSI_CHARSET;
+		_tcsncpy(enum_logfont.lfFaceName, FontName, ARRAYSIZE(enum_logfont.lfFaceName) - 1);
+		res = EnumFontFamiliesEx(hdc, &enum_logfont, enum_font_callback, (LPARAM)&logfont, 0);
+		if (res == 0) {
+			break;
+		}
+	}
+	dpi = get_dpi(hwnd);
+	ReleaseDC(hwnd, hdc);
+
+	logfont.lfHeight = font_size_points * dpi / 72;
+	logfont.lfWidth = 0;
+	logfont.lfWeight = weight;
+	font = CreateFontIndirect(&logfont);
+
+	return font;
+}
+
+static const TCHAR *my_fonts[] = {
+	TEXT("Segoe UI"),
+	TEXT("Tahoma"),
+	TEXT("Times New Roman"),
+	TEXT("Arial"),
+	TEXT("FreeSans"),
+	TEXT("DejaVu Sans Light"),
+	TEXT("Cousine"),
+};
+
+HFONT create_font(HWND hwnd, enum font_use use, uint32_t font_size_points)
+{
+	switch (use) {
+	default:
+	case MY_FONT:
+		return create_font_from_list(hwnd, my_fonts, ARRAYSIZE(my_fonts),
+			font_size_points, FW_EXTRALIGHT);
+	case HEADER_FONT:
+		return create_font_from_list(hwnd, my_fonts, ARRAYSIZE(my_fonts),
+			font_size_points, FW_SEMIBOLD);
+	}
+}
+
+uint32_t get_font_pixels_height(HWND hwnd, HFONT hfont)
+{
+		HDC hdc;
+		HFONT old_font;
+		int saved_state;
+		TEXTMETRIC tm;
+
+		hdc = GetDC(hwnd);
+		saved_state = SaveDC(hdc);
+		old_font = (HFONT)SelectObject(hdc, hfont);
+		GetTextMetrics(hdc, &tm);
+		SelectObject(hdc, old_font);
+		RestoreDC(hdc, saved_state);
+		ReleaseDC(hwnd, hdc);
+
+		return tm.tmHeight;
+}
+
diff --git a/PowerEditor/src/font_helper.h b/PowerEditor/src/font_helper.h
new file mode 100755
index 00000000..951f0b84
--- /dev/null
+++ b/PowerEditor/src/font_helper.h
@@ -0,0 +1,17 @@
+#ifndef FONT_HELPER_H
+#define FONT_HELPER_H
+
+#include <windows.h>
+#include <stdint.h>
+
+enum font_use {
+	MY_FONT,
+	HEADER_FONT,
+};
+
+void font_helper_init(void);
+HFONT create_font(HWND hwnd, enum font_use use, uint32_t font_size_points);
+uint32_t get_font_pixels_height(HWND hwnd, HFONT hfont);
+
+#endif /* FONT_HELPER_H */
+
diff --git a/PowerEditor/src/winmain.cpp b/PowerEditor/src/winmain.cpp
index aeec60fb..ae28663f 100644
--- a/PowerEditor/src/winmain.cpp
+++ b/PowerEditor/src/winmain.cpp
@@ -30,6 +30,7 @@
 #include "Win32Exception.h"	//Win32 exception
 #include "MiniDumper.h"			//Write dump files
 #include "verifySignedfile.h"
+#include <font_helper.h>
 
 typedef std::vector<generic_string> ParamVector;
 
@@ -371,6 +372,8 @@ int WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE, PWSTR pCmdLine, int)
 	if (::GetLastError() == ERROR_ALREADY_EXISTS)
 		TheFirstOne = false;
 
+	font_helper_init();
+
 	// Convert commandline to notepad-compatible format, if applicable
 	if ( isInList(FLAG_NOTEPAD_COMPATIBILITY, params) )
 	{
@@ -421,7 +424,7 @@ int WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE, PWSTR pCmdLine, int)
 	nppParameters.load();
 	NppGUI & nppGui = const_cast<NppGUI &>(nppParameters.getNppGUI());
 
-	bool doUpdateNpp = nppGui._autoUpdateOpt._doAutoUpdate;
+	bool doUpdateNpp = false;
 	bool doUpdatePluginList = nppGui._autoUpdateOpt._doAutoUpdate;
 
 	if (doFunctionListExport || doPrintAndQuit) // export functionlist feature will serialize fuctionlist on the disk, then exit Notepad++. So it's important to not launch into existing instance, and keep it silent.
diff --git a/PowerEditor/visual.net/notepadPlus.vcxproj b/PowerEditor/visual.net/notepadPlus.vcxproj
index f801b02a..f76ca320 100755
--- a/PowerEditor/visual.net/notepadPlus.vcxproj
+++ b/PowerEditor/visual.net/notepadPlus.vcxproj
@@ -23,29 +23,29 @@
     <ProjectGuid>{FCF60E65-1B78-4D1D-AB59-4FC00AC8C248}</ProjectGuid>
     <RootNamespace>Notepad++</RootNamespace>
     <Keyword>Win32Proj</Keyword>
-    <WindowsTargetPlatformVersion>10.0.17763.0</WindowsTargetPlatformVersion>
+    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
   </PropertyGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Unicode Release|Win32'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
-    <PlatformToolset>v141</PlatformToolset>
+    <PlatformToolset>v142</PlatformToolset>
     <CharacterSet>Unicode</CharacterSet>
     <WholeProgramOptimization>true</WholeProgramOptimization>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Unicode Release|x64'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
-    <PlatformToolset>v141</PlatformToolset>
+    <PlatformToolset>v142</PlatformToolset>
     <CharacterSet>Unicode</CharacterSet>
     <WholeProgramOptimization>true</WholeProgramOptimization>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Unicode Debug|Win32'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
-    <PlatformToolset>v141</PlatformToolset>
+    <PlatformToolset>v142</PlatformToolset>
     <CharacterSet>Unicode</CharacterSet>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Unicode Debug|x64'" Label="Configuration">
     <ConfigurationType>Application</ConfigurationType>
-    <PlatformToolset>v141</PlatformToolset>
+    <PlatformToolset>v142</PlatformToolset>
     <CharacterSet>Unicode</CharacterSet>
   </PropertyGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
@@ -105,7 +105,7 @@
       <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
       <MultiProcessorCompilation>true</MultiProcessorCompilation>
       <SmallerTypeCheck>false</SmallerTypeCheck>
-      <DisableSpecificWarnings>4091;4456;4457;4459</DisableSpecificWarnings>
+      <DisableSpecificWarnings>4091;4456;4457;4459;4100</DisableSpecificWarnings>
       <AdditionalOptions>/Zc:strictStrings %(AdditionalOptions)</AdditionalOptions>
       <ConformanceMode>true</ConformanceMode>
     </ClCompile>
@@ -143,7 +143,7 @@
       <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
       <MultiProcessorCompilation>true</MultiProcessorCompilation>
       <SmallerTypeCheck>false</SmallerTypeCheck>
-      <DisableSpecificWarnings>4091;4456;4457;4459</DisableSpecificWarnings>
+      <DisableSpecificWarnings>4091;4456;4457;4459;4100</DisableSpecificWarnings>
       <AdditionalOptions>/Zc:strictStrings %(AdditionalOptions)</AdditionalOptions>
       <ConformanceMode>true</ConformanceMode>
     </ClCompile>
@@ -187,7 +187,7 @@
       <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
       <EnableEnhancedInstructionSet>NoExtensions</EnableEnhancedInstructionSet>
       <MultiProcessorCompilation>true</MultiProcessorCompilation>
-      <DisableSpecificWarnings>4091;4456;4457;4459</DisableSpecificWarnings>
+      <DisableSpecificWarnings>4091;4456;4457;4459;4100</DisableSpecificWarnings>
       <AdditionalOptions>/Zc:strictStrings %(AdditionalOptions)</AdditionalOptions>
       <ConformanceMode>true</ConformanceMode>
     </ClCompile>
@@ -239,7 +239,7 @@ copy ..\src\contextMenu.xml ..\bin\contextMenu.xml
       <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
       <EnableEnhancedInstructionSet>NoExtensions</EnableEnhancedInstructionSet>
       <MultiProcessorCompilation>true</MultiProcessorCompilation>
-      <DisableSpecificWarnings>4091;4456;4457;4459</DisableSpecificWarnings>
+      <DisableSpecificWarnings>4091;4456;4457;4459;4100</DisableSpecificWarnings>
       <AdditionalOptions>/Zc:strictStrings %(AdditionalOptions)</AdditionalOptions>
       <ConformanceMode>true</ConformanceMode>
     </ClCompile>
@@ -272,6 +272,7 @@ copy ..\src\contextMenu.xml ..\bin64\contextMenu.xml
     </PostBuildEvent>
   </ItemDefinitionGroup>
   <ItemGroup>
+    <ClCompile Include="..\src\font_helper.cpp" />
     <ClCompile Include="..\src\MISC\Common\verifySignedfile.cpp" />
     <ClCompile Include="..\src\MISC\md5\md5Dlgs.cpp" />
     <ClCompile Include="..\src\MISC\sha2\sha-256.cpp" />
diff --git a/scintilla/win32/PlatWin.cxx b/scintilla/win32/PlatWin.cxx
index 4cdfddef..a1d9741e 100644
--- a/scintilla/win32/PlatWin.cxx
+++ b/scintilla/win32/PlatWin.cxx
@@ -58,6 +58,8 @@
 #define LOAD_LIBRARY_SEARCH_SYSTEM32 0x00000800
 #endif
 
+int get_monitor_dpi(HDC hdc);
+
 namespace Scintilla {
 
 UINT CodePageFromCharSet(DWORD characterSet, UINT documentCodePage);
@@ -601,7 +603,7 @@ int SurfaceGDI::LogPixelsY() {
 }
 
 int SurfaceGDI::DeviceHeightFont(int points) {
-	return ::MulDiv(points, LogPixelsY(), 72);
+	return ::MulDiv(points, ::get_monitor_dpi(hdc), 72);
 }
 
 void SurfaceGDI::MoveTo(int x_, int y_) {
diff --git a/scintilla/win32/SciLexer.vcxproj b/scintilla/win32/SciLexer.vcxproj
index 3110614c..c434df54 100644
--- a/scintilla/win32/SciLexer.vcxproj
+++ b/scintilla/win32/SciLexer.vcxproj
@@ -27,7 +27,7 @@
   <PropertyGroup>
     <ConfigurationType>DynamicLibrary</ConfigurationType>
     <CharacterSet>Unicode</CharacterSet>
-    <PlatformToolset>v141</PlatformToolset>
+    <PlatformToolset>v142</PlatformToolset>
   </PropertyGroup>
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
     <UseDebugLibraries>true</UseDebugLibraries>
@@ -66,7 +66,7 @@
     <Link>
       <SubSystem>Windows</SubSystem>
       <GenerateDebugInformation>true</GenerateDebugInformation>
-      <AdditionalDependencies>imm32.lib;msimg32.lib;%(AdditionalDependencies)</AdditionalDependencies>
+      <AdditionalDependencies>imm32.lib;msimg32.lib;Shcore.lib;%(AdditionalDependencies)</AdditionalDependencies>
     </Link>
   </ItemDefinitionGroup>
   <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
@@ -132,4 +132,4 @@
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
   <ImportGroup Label="ExtensionTargets">
   </ImportGroup>
-</Project>
+</Project>
\ No newline at end of file
diff --git a/scintilla/win32/ScintillaWin.cxx b/scintilla/win32/ScintillaWin.cxx
index 92e64d44..2dcb80e2 100644
--- a/scintilla/win32/ScintillaWin.cxx
+++ b/scintilla/win32/ScintillaWin.cxx
@@ -23,6 +23,8 @@
 #include <memory>
 #include <chrono>
 
+#include <shellscalingapi.h>
+
 #undef _WIN32_WINNT
 #define _WIN32_WINNT 0x0500
 #undef WINVER
@@ -3483,3 +3485,21 @@ int ResourcesRelease(bool fromDllMain) {
 int Scintilla_ReleaseResources() {
 	return Scintilla::ResourcesRelease(false);
 }
+
+int get_monitor_dpi(HDC hdc)
+{
+	HWND hwnd;
+	HMONITOR hmon;
+	UINT dpix, dpiy;
+	HRESULT res;
+
+	hwnd = ::WindowFromDC(hdc);
+	hmon = ::MonitorFromWindow(hwnd, MONITOR_DEFAULTTONEAREST);
+	res = ::GetDpiForMonitor(hmon, MDT_RAW_DPI, &dpix, &dpiy);
+
+	if (res == S_OK) {
+		return dpiy;
+	}
+
+	return ::GetDeviceCaps(hdc, LOGPIXELSY);
+}

--------------2.30.0--


