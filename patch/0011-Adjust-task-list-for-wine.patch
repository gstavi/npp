From ff727edca6de7710d6c035249434fa48dc6ecb66 Mon Sep 17 00:00:00 2001
From: gstavi <gstavi@users.noreply.github.com>
Date: Thu, 2 Jun 2016 11:09:44 +0300
Subject: [PATCH 11/18] Adjust task list for wine
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="------------2.30.0"

This is a multi-part message in MIME format.
--------------2.30.0
Content-Type: text/plain; charset=UTF-8; format=fixed
Content-Transfer-Encoding: 8bit


diff --git a/PowerEditor/src/NppCommands.cpp b/PowerEditor/src/NppCommands.cpp
index d43ed45c..c2ff86ff 100644
--- a/PowerEditor/src/NppCommands.cpp
+++ b/PowerEditor/src/NppCommands.cpp
@@ -3075,10 +3075,13 @@ void Notepad_plus::command(int id)
 				{
 					if (TaskListDlg::_instanceCount == 0)
 					{
+						int iconDpiDynamicalSize = NppParameters::getInstance()._dpiManager.scaleY(_toReduceTabBar?12:18);
 						TaskListDlg tld;
+						_docTabIconList.setIconSize(15);
 						HIMAGELIST hImgLst = _docTabIconList.getHandle();
 						tld.init(_pPublicInterface->getHinst(), _pPublicInterface->getHSelf(), hImgLst, direction);
 						tld.doDialog();
+						_docTabIconList.setIconSize(iconDpiDynamicalSize);
 					}
 				}
 			}
diff --git a/PowerEditor/src/WinControls/TaskList/TaskList.cpp b/PowerEditor/src/WinControls/TaskList/TaskList.cpp
index c648a61a..544d0276 100644
--- a/PowerEditor/src/WinControls/TaskList/TaskList.cpp
+++ b/PowerEditor/src/WinControls/TaskList/TaskList.cpp
@@ -49,7 +49,7 @@ void TaskList::init(HINSTANCE hInst, HWND parent, HIMAGELIST hImaLst, int nbItem
     
     // Create the list-view window in report view with label editing enabled.
 	int listViewStyles = LVS_REPORT | LVS_OWNERDATA | LVS_NOCOLUMNHEADER | LVS_NOSORTHEADER\
-						| /*LVS_NOSCROLL |*/ LVS_SINGLESEL | LVS_AUTOARRANGE | LVS_OWNERDRAWFIXED\
+						| /*LVS_NOSCROLL |*/ LVS_SINGLESEL | LVS_AUTOARRANGE\
 						| LVS_SHAREIMAGELISTS/* | WS_BORDER*/;
 
 	_hSelf = ::CreateWindow(WC_LISTVIEW, 
@@ -88,6 +88,7 @@ void TaskList::init(HINSTANCE hInst, HWND parent, HIMAGELIST hImaLst, int nbItem
 
 	ListView_SetItemState(_hSelf, _currentIndex, LVIS_SELECTED|LVIS_FOCUSED, LVIS_SELECTED|LVIS_FOCUSED);
 	ListView_SetBkColor(_hSelf, lightYellow);
+	ListView_SetTextBkColor(_hSelf, lightYellow);
 }
 
 void TaskList::destroy()
@@ -114,28 +115,32 @@ RECT TaskList::adjustSize()
 
 	_rc = { 0, 0, 0, 0 };
 	TCHAR buf[MAX_PATH];
+
 	for (int i = 0 ; i < _nbItem ; ++i)
 	{
 		ListView_GetItemText(_hSelf, i, 0, buf, MAX_PATH);
 		int width = ListView_GetStringWidth(_hSelf, buf);
 		if (width > maxwidth)
 			maxwidth = width;
-		_rc.bottom += rc.bottom - rc.top;
 	}
 
 	_rc.right = maxwidth + imgWidth + leftMarge;
 	ListView_SetColumnWidth(_hSelf, 0, _rc.right);
-	::SendMessage(_hSelf, WM_SETFONT, reinterpret_cast<WPARAM>(_hFont), 0);
-
-	//if the tasklist exceeds the height of the display, leave some space at the bottom
-	if (_rc.bottom > ::GetSystemMetrics(SM_CYSCREEN) - 120)
-	{
-		_rc.bottom = ::GetSystemMetrics(SM_CYSCREEN) - 120;
-	}
-	reSizeTo(_rc);
-
-	// Task List's border is 1px smaller than ::GetSystemMetrics(SM_CYFRAME) returns
-	_rc.bottom += (::GetSystemMetrics(SM_CYFRAME) - 1) * 2;
+	winVer ver = (NppParameters::getInstance())->getWinVersion();
+	::SendMessage(_hSelf, WM_SETFONT, reinterpret_cast<WPARAM>(_hFont), 0);
+	approxRect = ::SendMessage(_hSelf, LVM_APPROXIMATEVIEWRECT, (WPARAM)-1, (LPARAM)-1);
+	_rc.right = LOWORD(approxRect);
+	_rc.bottom = HIWORD(approxRect);
+	_rc.bottom += (ver <= WV_XP && ver != WV_UNKNOWN)? 5: 15;
+	::ShowScrollBar(_hSelf, SB_HORZ, FALSE);
+	if (_rc.bottom < 512) {
+		::ShowScrollBar(_hSelf, SB_VERT, FALSE);
+	} else {
+		_rc.bottom = 512;
+		::ShowScrollBar(_hSelf, SB_VERT, TRUE);
+		_rc.right += ::GetSystemMetrics(SM_CXVSCROLL);
+	}
+	reSizeTo(_rc);
 	return _rc;
 }
 
@@ -176,6 +181,22 @@ int TaskList::updateCurrentIndex()
 	return _currentIndex;
 }
 
+void TaskList::moveSelection(int delta)
+{
+	size_t selected;
+
+	selected = (_currentIndex + _nbItem + delta) % _nbItem;
+
+	::SendMessage(_hSelf, WM_SETREDRAW, FALSE, 0);
+	ListView_SetItemState(_hSelf, _currentIndex, 0, LVIS_SELECTED|LVIS_FOCUSED);
+	ListView_SetItemState(_hSelf, selected, LVIS_SELECTED|LVIS_FOCUSED, LVIS_SELECTED|LVIS_FOCUSED);
+	ListView_EnsureVisible(_hSelf, selected, FALSE);
+	::SendMessage(_hSelf, WM_SETREDRAW, TRUE, 0);
+	UpdateWindow(_hSelf);              
+
+	_currentIndex = selected;
+}
+
 LRESULT TaskList::runProc(HWND hwnd, UINT Message, WPARAM wParam, LPARAM lParam)
 {
 	switch (Message)
@@ -194,33 +215,11 @@ LRESULT TaskList::runProc(HWND hwnd, UINT Message, WPARAM wParam, LPARAM lParam)
 			short zDelta = (short) HIWORD(wParam);
 			if (zDelta > 0)
 			{
-				int32_t selected = (_currentIndex - 1) < 0 ? (_nbItem - 1) : (_currentIndex - 1);
-				ListView_SetItemState(_hSelf, _currentIndex, 0, LVIS_SELECTED|LVIS_FOCUSED);
-				// tells what item(s) to be repainted
-				ListView_RedrawItems(_hSelf, _currentIndex, _currentIndex);
-				// repaint item(s)
-				UpdateWindow(_hSelf); 
-				ListView_SetItemState(_hSelf, selected, LVIS_SELECTED|LVIS_FOCUSED, LVIS_SELECTED|LVIS_FOCUSED);
-				// tells what item(s) to be repainted
-				ListView_RedrawItems(_hSelf, selected, selected);
-				// repaint item(s)
-				UpdateWindow(_hSelf);              
-				_currentIndex = selected;
+				moveSelection(-1);
 			}
 			else
 			{
-				int32_t selected = (_currentIndex + 1) > (_nbItem - 1) ? 0 : (_currentIndex + 1);
-				ListView_SetItemState(_hSelf, _currentIndex, 0, LVIS_SELECTED|LVIS_FOCUSED);
-				// tells what item(s) to be repainted
-				ListView_RedrawItems(_hSelf, _currentIndex, _currentIndex);
-				// repaint item(s)
-				UpdateWindow(_hSelf); 
-				ListView_SetItemState(_hSelf, selected, LVIS_SELECTED|LVIS_FOCUSED, LVIS_SELECTED|LVIS_FOCUSED);
-				// tells what item(s) to be repainted
-				ListView_RedrawItems(_hSelf, selected, selected);
-				// repaint item(s)
-				UpdateWindow(_hSelf);
-				_currentIndex = selected;
+				moveSelection(1);
 			}
 			ListView_EnsureVisible(_hSelf, _currentIndex, true);
 			return TRUE;
@@ -236,51 +235,26 @@ LRESULT TaskList::runProc(HWND hwnd, UINT Message, WPARAM wParam, LPARAM lParam)
 		{
 			MSG *msg = (MSG*)lParam;
 
-			if ( msg != NULL)
+			if ( msg == NULL)
+			{
+				/* Do nothing */
+			}
+			else if (msg->message != WM_KEYDOWN ||
+				(GetKeyState(VK_CONTROL)& 0x80) == 0)
+			{
+				return TRUE;
+			}
+			// Shift+Tab is cool but I think VK_UP and VK_LEFT are also cool :-)
+			else if (msg->wParam == VK_UP ||
+				(msg->wParam == VK_TAB && (GetKeyState(VK_SHIFT) & 0x80) != 0))
+			{
+				moveSelection(-1);
+			}
+			else if (msg->wParam == VK_DOWN || msg->wParam == VK_TAB)
 			{
-				if ((msg->message == WM_KEYDOWN) && (0x80 & GetKeyState(VK_CONTROL)))
-				{
-					// Shift+Tab is cool but I think VK_UP and VK_LEFT are also cool :-)
-					if (((msg->wParam == VK_TAB) && (0x80 & GetKeyState(VK_SHIFT))) ||
-					    (msg->wParam == VK_UP))
-					{ 
-						int32_t selected = (_currentIndex - 1) < 0 ? (_nbItem - 1) : (_currentIndex - 1);
-						ListView_SetItemState(_hSelf, _currentIndex, 0, LVIS_SELECTED|LVIS_FOCUSED);
-						// tells what item(s) to be repainted
-						ListView_RedrawItems(_hSelf, _currentIndex, _currentIndex);
-						// repaint item(s)
-						UpdateWindow(_hSelf); 
-						ListView_SetItemState(_hSelf, selected, LVIS_SELECTED|LVIS_FOCUSED, LVIS_SELECTED|LVIS_FOCUSED);
-						// tells what item(s) to be repainted
-						ListView_RedrawItems(_hSelf, selected, selected);
-						// repaint item(s)
-						UpdateWindow(_hSelf);              
-						_currentIndex = selected;
-					}
-					// VK_DOWN and VK_RIGHT do the same as VK_TAB does
-					else if ((msg->wParam == VK_TAB) || (msg->wParam == VK_DOWN))
-					{
-						int32_t selected = (_currentIndex + 1) > (_nbItem - 1) ? 0 : (_currentIndex + 1);
-						ListView_SetItemState(_hSelf, _currentIndex, 0, LVIS_SELECTED|LVIS_FOCUSED);
-						// tells what item(s) to be repainted
-						ListView_RedrawItems(_hSelf, _currentIndex, _currentIndex);
-						// repaint item(s)
-						UpdateWindow(_hSelf);
-						ListView_SetItemState(_hSelf, selected, LVIS_SELECTED|LVIS_FOCUSED, LVIS_SELECTED|LVIS_FOCUSED);
-						// tells what item(s) to be repainted
-						ListView_RedrawItems(_hSelf, selected, selected);
-						// repaint item(s)
-						UpdateWindow(_hSelf);              
-						_currentIndex = selected;
-					}
-					ListView_EnsureVisible(_hSelf, _currentIndex, true);
-				}
-				else
-				{
-					return TRUE;
-				}
+				moveSelection(1);
 			}
-			return DLGC_WANTALLKEYS	;
+			return DLGC_WANTALLKEYS;
 		}
 
 		default :
diff --git a/PowerEditor/src/WinControls/TaskList/TaskList.h b/PowerEditor/src/WinControls/TaskList/TaskList.h
index 89c4e9c5..33340e74 100644
--- a/PowerEditor/src/WinControls/TaskList/TaskList.h
+++ b/PowerEditor/src/WinControls/TaskList/TaskList.h
@@ -64,6 +64,7 @@ protected:
 
 	WNDPROC _defaultProc;
 	LRESULT runProc(HWND hwnd, UINT Message, WPARAM wParam, LPARAM lParam);
+	void moveSelection(int delta);
 
 	static LRESULT CALLBACK staticProc(HWND hwnd, UINT Message, WPARAM wParam, LPARAM lParam) {
 		return (((TaskList *)(::GetWindowLongPtr(hwnd, GWLP_USERDATA)))->runProc(hwnd, Message, wParam, lParam));
diff --git a/PowerEditor/src/WinControls/TaskList/TaskListDlg.cpp b/PowerEditor/src/WinControls/TaskList/TaskListDlg.cpp
index c94a187d..d22418e6 100644
--- a/PowerEditor/src/WinControls/TaskList/TaskListDlg.cpp
+++ b/PowerEditor/src/WinControls/TaskList/TaskListDlg.cpp
@@ -85,7 +85,7 @@ INT_PTR CALLBACK TaskListDlg::run_dlgProc(UINT Message, WPARAM wParam, LPARAM lP
 				i2set = 0;
 
 			_taskList.init(_hInst, _hSelf, _hImalist, nbTotal, i2set);
-			_taskList.setFont(TEXT("Verdana"), NppParameters::getInstance()._dpiManager.scaleY(14));
+			_taskList.setFont(TEXT("Verdana"), NppParameters::getInstance()._dpiManager.scaleY(-16));
 			_rc = _taskList.adjustSize();
 
 			reSizeTo(_rc);
diff --git a/PowerEditor/src/WinControls/TaskList/TaskListDlg.rc b/PowerEditor/src/WinControls/TaskList/TaskListDlg.rc
index b67597ca..d164b72c 100644
--- a/PowerEditor/src/WinControls/TaskList/TaskListDlg.rc
+++ b/PowerEditor/src/WinControls/TaskList/TaskListDlg.rc
@@ -30,7 +30,7 @@
 #include "TaskListDlg_rc.h"
 
 IDD_TASKLIST_DLG DIALOGEX DISCARDABLE 0, 0, 300, 300
-STYLE WS_POPUP | WS_VISIBLE | WS_THICKFRAME
+STYLE WS_POPUP | WS_VISIBLE | WS_BORDER
 FONT 8, TEXT("MS Shell Dlg"), 0, 0, 0x1
 BEGIN
 END

--------------2.30.0--


